
espresso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc8  08005cc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd0  08005cd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cd4  08005cd4  00015cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000070  08005d48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005d48  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b2d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355e  00000000  00000000  00036bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025488  00000000  00000000  0003c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015562  00000000  00000000  000618f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dac15  00000000  00000000  00076e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151a67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  00151abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bf4 	.word	0x08005bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005bf4 	.word	0x08005bf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b96e 	b.w	800091c <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468c      	mov	ip, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	f040 8083 	bne.w	800076e <__udivmoddi4+0x116>
 8000668:	428a      	cmp	r2, r1
 800066a:	4617      	mov	r7, r2
 800066c:	d947      	bls.n	80006fe <__udivmoddi4+0xa6>
 800066e:	fab2 f282 	clz	r2, r2
 8000672:	b142      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000674:	f1c2 0020 	rsb	r0, r2, #32
 8000678:	fa24 f000 	lsr.w	r0, r4, r0
 800067c:	4091      	lsls	r1, r2
 800067e:	4097      	lsls	r7, r2
 8000680:	ea40 0c01 	orr.w	ip, r0, r1
 8000684:	4094      	lsls	r4, r2
 8000686:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800068a:	0c23      	lsrs	r3, r4, #16
 800068c:	fbbc f6f8 	udiv	r6, ip, r8
 8000690:	fa1f fe87 	uxth.w	lr, r7
 8000694:	fb08 c116 	mls	r1, r8, r6, ip
 8000698:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069c:	fb06 f10e 	mul.w	r1, r6, lr
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x60>
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006aa:	f080 8119 	bcs.w	80008e0 <__udivmoddi4+0x288>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 8116 	bls.w	80008e0 <__udivmoddi4+0x288>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	443b      	add	r3, r7
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c0:	fb08 3310 	mls	r3, r8, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x8c>
 80006d0:	193c      	adds	r4, r7, r4
 80006d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d6:	f080 8105 	bcs.w	80008e4 <__udivmoddi4+0x28c>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	f240 8102 	bls.w	80008e4 <__udivmoddi4+0x28c>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e8:	eba4 040e 	sub.w	r4, r4, lr
 80006ec:	2600      	movs	r6, #0
 80006ee:	b11d      	cbz	r5, 80006f8 <__udivmoddi4+0xa0>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c5 4300 	strd	r4, r3, [r5]
 80006f8:	4631      	mov	r1, r6
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	b902      	cbnz	r2, 8000702 <__udivmoddi4+0xaa>
 8000700:	deff      	udf	#255	; 0xff
 8000702:	fab2 f282 	clz	r2, r2
 8000706:	2a00      	cmp	r2, #0
 8000708:	d150      	bne.n	80007ac <__udivmoddi4+0x154>
 800070a:	1bcb      	subs	r3, r1, r7
 800070c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000710:	fa1f f887 	uxth.w	r8, r7
 8000714:	2601      	movs	r6, #1
 8000716:	fbb3 fcfe 	udiv	ip, r3, lr
 800071a:	0c21      	lsrs	r1, r4, #16
 800071c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000724:	fb08 f30c 	mul.w	r3, r8, ip
 8000728:	428b      	cmp	r3, r1
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0xe4>
 800072c:	1879      	adds	r1, r7, r1
 800072e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0xe2>
 8000734:	428b      	cmp	r3, r1
 8000736:	f200 80e9 	bhi.w	800090c <__udivmoddi4+0x2b4>
 800073a:	4684      	mov	ip, r0
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb1 f0fe 	udiv	r0, r1, lr
 8000744:	fb0e 1110 	mls	r1, lr, r0, r1
 8000748:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800074c:	fb08 f800 	mul.w	r8, r8, r0
 8000750:	45a0      	cmp	r8, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x10c>
 8000754:	193c      	adds	r4, r7, r4
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x10a>
 800075c:	45a0      	cmp	r8, r4
 800075e:	f200 80d9 	bhi.w	8000914 <__udivmoddi4+0x2bc>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 0408 	sub.w	r4, r4, r8
 8000768:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800076c:	e7bf      	b.n	80006ee <__udivmoddi4+0x96>
 800076e:	428b      	cmp	r3, r1
 8000770:	d909      	bls.n	8000786 <__udivmoddi4+0x12e>
 8000772:	2d00      	cmp	r5, #0
 8000774:	f000 80b1 	beq.w	80008da <__udivmoddi4+0x282>
 8000778:	2600      	movs	r6, #0
 800077a:	e9c5 0100 	strd	r0, r1, [r5]
 800077e:	4630      	mov	r0, r6
 8000780:	4631      	mov	r1, r6
 8000782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000786:	fab3 f683 	clz	r6, r3
 800078a:	2e00      	cmp	r6, #0
 800078c:	d14a      	bne.n	8000824 <__udivmoddi4+0x1cc>
 800078e:	428b      	cmp	r3, r1
 8000790:	d302      	bcc.n	8000798 <__udivmoddi4+0x140>
 8000792:	4282      	cmp	r2, r0
 8000794:	f200 80b8 	bhi.w	8000908 <__udivmoddi4+0x2b0>
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	eb61 0103 	sbc.w	r1, r1, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	468c      	mov	ip, r1
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0a8      	beq.n	80006f8 <__udivmoddi4+0xa0>
 80007a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007aa:	e7a5      	b.n	80006f8 <__udivmoddi4+0xa0>
 80007ac:	f1c2 0320 	rsb	r3, r2, #32
 80007b0:	fa20 f603 	lsr.w	r6, r0, r3
 80007b4:	4097      	lsls	r7, r2
 80007b6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007be:	40d9      	lsrs	r1, r3
 80007c0:	4330      	orrs	r0, r6
 80007c2:	0c03      	lsrs	r3, r0, #16
 80007c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007c8:	fa1f f887 	uxth.w	r8, r7
 80007cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007d4:	fb06 f108 	mul.w	r1, r6, r8
 80007d8:	4299      	cmp	r1, r3
 80007da:	fa04 f402 	lsl.w	r4, r4, r2
 80007de:	d909      	bls.n	80007f4 <__udivmoddi4+0x19c>
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007e6:	f080 808d 	bcs.w	8000904 <__udivmoddi4+0x2ac>
 80007ea:	4299      	cmp	r1, r3
 80007ec:	f240 808a 	bls.w	8000904 <__udivmoddi4+0x2ac>
 80007f0:	3e02      	subs	r6, #2
 80007f2:	443b      	add	r3, r7
 80007f4:	1a5b      	subs	r3, r3, r1
 80007f6:	b281      	uxth	r1, r0
 80007f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb00 f308 	mul.w	r3, r0, r8
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x1c4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000812:	d273      	bcs.n	80008fc <__udivmoddi4+0x2a4>
 8000814:	428b      	cmp	r3, r1
 8000816:	d971      	bls.n	80008fc <__udivmoddi4+0x2a4>
 8000818:	3802      	subs	r0, #2
 800081a:	4439      	add	r1, r7
 800081c:	1acb      	subs	r3, r1, r3
 800081e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000822:	e778      	b.n	8000716 <__udivmoddi4+0xbe>
 8000824:	f1c6 0c20 	rsb	ip, r6, #32
 8000828:	fa03 f406 	lsl.w	r4, r3, r6
 800082c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000830:	431c      	orrs	r4, r3
 8000832:	fa20 f70c 	lsr.w	r7, r0, ip
 8000836:	fa01 f306 	lsl.w	r3, r1, r6
 800083a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800083e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000842:	431f      	orrs	r7, r3
 8000844:	0c3b      	lsrs	r3, r7, #16
 8000846:	fbb1 f9fe 	udiv	r9, r1, lr
 800084a:	fa1f f884 	uxth.w	r8, r4
 800084e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000852:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000856:	fb09 fa08 	mul.w	sl, r9, r8
 800085a:	458a      	cmp	sl, r1
 800085c:	fa02 f206 	lsl.w	r2, r2, r6
 8000860:	fa00 f306 	lsl.w	r3, r0, r6
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x220>
 8000866:	1861      	adds	r1, r4, r1
 8000868:	f109 30ff 	add.w	r0, r9, #4294967295
 800086c:	d248      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 800086e:	458a      	cmp	sl, r1
 8000870:	d946      	bls.n	8000900 <__udivmoddi4+0x2a8>
 8000872:	f1a9 0902 	sub.w	r9, r9, #2
 8000876:	4421      	add	r1, r4
 8000878:	eba1 010a 	sub.w	r1, r1, sl
 800087c:	b2bf      	uxth	r7, r7
 800087e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000882:	fb0e 1110 	mls	r1, lr, r0, r1
 8000886:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800088a:	fb00 f808 	mul.w	r8, r0, r8
 800088e:	45b8      	cmp	r8, r7
 8000890:	d907      	bls.n	80008a2 <__udivmoddi4+0x24a>
 8000892:	19e7      	adds	r7, r4, r7
 8000894:	f100 31ff 	add.w	r1, r0, #4294967295
 8000898:	d22e      	bcs.n	80008f8 <__udivmoddi4+0x2a0>
 800089a:	45b8      	cmp	r8, r7
 800089c:	d92c      	bls.n	80008f8 <__udivmoddi4+0x2a0>
 800089e:	3802      	subs	r0, #2
 80008a0:	4427      	add	r7, r4
 80008a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008a6:	eba7 0708 	sub.w	r7, r7, r8
 80008aa:	fba0 8902 	umull	r8, r9, r0, r2
 80008ae:	454f      	cmp	r7, r9
 80008b0:	46c6      	mov	lr, r8
 80008b2:	4649      	mov	r1, r9
 80008b4:	d31a      	bcc.n	80008ec <__udivmoddi4+0x294>
 80008b6:	d017      	beq.n	80008e8 <__udivmoddi4+0x290>
 80008b8:	b15d      	cbz	r5, 80008d2 <__udivmoddi4+0x27a>
 80008ba:	ebb3 020e 	subs.w	r2, r3, lr
 80008be:	eb67 0701 	sbc.w	r7, r7, r1
 80008c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008c6:	40f2      	lsrs	r2, r6
 80008c8:	ea4c 0202 	orr.w	r2, ip, r2
 80008cc:	40f7      	lsrs	r7, r6
 80008ce:	e9c5 2700 	strd	r2, r7, [r5]
 80008d2:	2600      	movs	r6, #0
 80008d4:	4631      	mov	r1, r6
 80008d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008da:	462e      	mov	r6, r5
 80008dc:	4628      	mov	r0, r5
 80008de:	e70b      	b.n	80006f8 <__udivmoddi4+0xa0>
 80008e0:	4606      	mov	r6, r0
 80008e2:	e6e9      	b.n	80006b8 <__udivmoddi4+0x60>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6fd      	b.n	80006e4 <__udivmoddi4+0x8c>
 80008e8:	4543      	cmp	r3, r8
 80008ea:	d2e5      	bcs.n	80008b8 <__udivmoddi4+0x260>
 80008ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80008f0:	eb69 0104 	sbc.w	r1, r9, r4
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7df      	b.n	80008b8 <__udivmoddi4+0x260>
 80008f8:	4608      	mov	r0, r1
 80008fa:	e7d2      	b.n	80008a2 <__udivmoddi4+0x24a>
 80008fc:	4660      	mov	r0, ip
 80008fe:	e78d      	b.n	800081c <__udivmoddi4+0x1c4>
 8000900:	4681      	mov	r9, r0
 8000902:	e7b9      	b.n	8000878 <__udivmoddi4+0x220>
 8000904:	4666      	mov	r6, ip
 8000906:	e775      	b.n	80007f4 <__udivmoddi4+0x19c>
 8000908:	4630      	mov	r0, r6
 800090a:	e74a      	b.n	80007a2 <__udivmoddi4+0x14a>
 800090c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000910:	4439      	add	r1, r7
 8000912:	e713      	b.n	800073c <__udivmoddi4+0xe4>
 8000914:	3802      	subs	r0, #2
 8000916:	443c      	add	r4, r7
 8000918:	e724      	b.n	8000764 <__udivmoddi4+0x10c>
 800091a:	bf00      	nop

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000940:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <MX_ADC1_Init+0xcc>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_ADC1_Init+0xc8>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <MX_ADC1_Init+0xc8>)
 800095a:	2200      	movs	r2, #0
 800095c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_ADC1_Init+0xc8>)
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <MX_ADC1_Init+0xd0>)
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_ADC1_Init+0xc8>)
 800097a:	2201      	movs	r2, #1
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_ADC1_Init+0xc8>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4816      	ldr	r0, [pc, #88]	; (80009e8 <MX_ADC1_Init+0xc8>)
 800098e:	f001 f8f7 	bl	8001b80 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fcfc 	bl	8001394 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 800099c:	2316      	movs	r3, #22
 800099e:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_ADC1_Init+0xc8>)
 80009b0:	f001 fb58 	bl	8002064 <HAL_ADCEx_MultiModeConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80009ba:	f000 fceb 	bl	8001394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009be:	2301      	movs	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80009c6:	2301      	movs	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_ADC1_Init+0xc8>)
 80009d0:	f001 f91a 	bl	8001c08 <HAL_ADC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80009da:	f000 fcdb 	bl	8001394 <Error_Handler>
  }

}
 80009de:	bf00      	nop
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000e0 	.word	0x200000e0
 80009ec:	40012000 	.word	0x40012000
 80009f0:	0f000001 	.word	0x0f000001

080009f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a08:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <MX_ADC2_Init+0x90>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a4a:	f001 f899 	bl	8001b80 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8000a54:	f000 fc9e 	bl	8001394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_ADC2_Init+0x8c>)
 8000a6a:	f001 f8cd 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000a74:	f000 fc8e 	bl	8001394 <Error_Handler>
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000098 	.word	0x20000098
 8000a84:	40012100 	.word	0x40012100

08000a88 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000a9c:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <MX_ADC3_Init+0x90>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000ade:	f001 f84f 	bl	8001b80 <HAL_ADC_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8000ae8:	f000 fc54 	bl	8001394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000aec:	230d      	movs	r3, #13
 8000aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_ADC3_Init+0x8c>)
 8000afe:	f001 f883 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000b08:	f000 fc44 	bl	8001394 <Error_Handler>
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000128 	.word	0x20000128
 8000b18:	40012200 	.word	0x40012200

08000b1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a45      	ldr	r2, [pc, #276]	; (8000c50 <HAL_ADC_MspInit+0x134>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d128      	bne.n	8000b90 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a43      	ldr	r2, [pc, #268]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a3c      	ldr	r2, [pc, #240]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b76:	2302      	movs	r3, #2
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4833      	ldr	r0, [pc, #204]	; (8000c58 <HAL_ADC_MspInit+0x13c>)
 8000b8a:	f001 ffd1 	bl	8002b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000b8e:	e05a      	b.n	8000c46 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <HAL_ADC_MspInit+0x140>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d128      	bne.n	8000bec <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <HAL_ADC_MspInit+0x13c>)
 8000be6:	f001 ffa3 	bl	8002b30 <HAL_GPIO_Init>
}
 8000bea:	e02c      	b.n	8000c46 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_ADC_MspInit+0x144>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_ADC_MspInit+0x138>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <HAL_ADC_MspInit+0x148>)
 8000c42:	f001 ff75 	bl	8002b30 <HAL_GPIO_Init>
}
 8000c46:	bf00      	nop
 8000c48:	3738      	adds	r7, #56	; 0x38
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40012100 	.word	0x40012100
 8000c60:	40012200 	.word	0x40012200
 8000c64:	40020800 	.word	0x40020800

08000c68 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c74:	2205      	movs	r2, #5
 8000c76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c86:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000c8a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c92:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_CAN1_Init+0x64>)
 8000cba:	f001 fa19 	bl	80020f0 <HAL_CAN_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cc4:	f000 fb66 	bl	8001394 <Error_Handler>
  }

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000170 	.word	0x20000170
 8000cd0:	40006400 	.word	0x40006400

08000cd4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_CAN_MspInit+0x94>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d134      	bne.n	8000d60 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_CAN_MspInit+0x98>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d40:	2309      	movs	r3, #9
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_CAN_MspInit+0x9c>)
 8000d4c:	f001 fef0 	bl	8002b30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2014      	movs	r0, #20
 8000d56:	f001 feb4 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f001 fecd 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40006400 	.word	0x40006400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <can_rx_init>:
  }
} 

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
	msg->filter.FilterIdLow=0x0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterMaskIdHigh=0xFFF;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdLow=0;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterActivation=ENABLE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3324      	adds	r3, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <can_rx_init+0x50>)
 8000db6:	f001 fa97 	bl	80022e8 <HAL_CAN_ConfigFilter>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000170 	.word	0x20000170

08000dc8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	61da      	str	r2, [r3, #28]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
	msg->tx_header.StdId = M_ID;  // recipient CAN ID
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <pack_cmd>:
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]

void pack_cmd(CANTxMessage * msg, float p_des, float v_des, float kp, float kd, float t_ff){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6178      	str	r0, [r7, #20]
 8000dfc:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e00:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e04:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e08:	edc7 1a01 	vstr	s3, [r7, #4]
 8000e0c:	ed87 2a00 	vstr	s4, [r7]

     /// limit data to be within bounds ///
     p_des = fminf(fmaxf(P_MIN, p_des), P_MAX);
 8000e10:	edd7 0a04 	vldr	s1, [r7, #16]
 8000e14:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8000e18:	f004 fe9a 	bl	8005b50 <fmaxf>
 8000e1c:	eef0 7a40 	vmov.f32	s15, s0
 8000e20:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8000e24:	eeb0 0a67 	vmov.f32	s0, s15
 8000e28:	f004 fead 	bl	8005b86 <fminf>
 8000e2c:	ed87 0a04 	vstr	s0, [r7, #16]
     v_des = fminf(fmaxf(V_MIN, v_des), V_MAX);
 8000e30:	edd7 0a03 	vldr	s1, [r7, #12]
 8000e34:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000f94 <pack_cmd+0x1a0>
 8000e38:	f004 fe8a 	bl	8005b50 <fmaxf>
 8000e3c:	eef0 7a40 	vmov.f32	s15, s0
 8000e40:	eddf 0a55 	vldr	s1, [pc, #340]	; 8000f98 <pack_cmd+0x1a4>
 8000e44:	eeb0 0a67 	vmov.f32	s0, s15
 8000e48:	f004 fe9d 	bl	8005b86 <fminf>
 8000e4c:	ed87 0a03 	vstr	s0, [r7, #12]
     kp = fminf(fmaxf(KP_MIN, kp), KP_MAX);
 8000e50:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e54:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8000f9c <pack_cmd+0x1a8>
 8000e58:	f004 fe7a 	bl	8005b50 <fmaxf>
 8000e5c:	eef0 7a40 	vmov.f32	s15, s0
 8000e60:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8000fa0 <pack_cmd+0x1ac>
 8000e64:	eeb0 0a67 	vmov.f32	s0, s15
 8000e68:	f004 fe8d 	bl	8005b86 <fminf>
 8000e6c:	ed87 0a02 	vstr	s0, [r7, #8]
     kd = fminf(fmaxf(KD_MIN, kd), KD_MAX);
 8000e70:	edd7 0a01 	vldr	s1, [r7, #4]
 8000e74:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8000f9c <pack_cmd+0x1a8>
 8000e78:	f004 fe6a 	bl	8005b50 <fmaxf>
 8000e7c:	eef0 7a40 	vmov.f32	s15, s0
 8000e80:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8000e84:	eeb0 0a67 	vmov.f32	s0, s15
 8000e88:	f004 fe7d 	bl	8005b86 <fminf>
 8000e8c:	ed87 0a01 	vstr	s0, [r7, #4]
     t_ff = fminf(fmaxf(T_MIN, t_ff), T_MAX);
 8000e90:	edd7 0a00 	vldr	s1, [r7]
 8000e94:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8000fa4 <pack_cmd+0x1b0>
 8000e98:	f004 fe5a 	bl	8005b50 <fmaxf>
 8000e9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ea0:	eddf 0a41 	vldr	s1, [pc, #260]	; 8000fa8 <pack_cmd+0x1b4>
 8000ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea8:	f004 fe6d 	bl	8005b86 <fminf>
 8000eac:	ed87 0a00 	vstr	s0, [r7]
     /// convert floats to unsigned ints ///
     uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8000eb0:	2010      	movs	r0, #16
 8000eb2:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8000eb6:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8000eba:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ebe:	f000 fa6e 	bl	800139e <float_to_uint>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
     uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8000f98 <pack_cmd+0x1a4>
 8000ecc:	eddf 0a31 	vldr	s1, [pc, #196]	; 8000f94 <pack_cmd+0x1a0>
 8000ed0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ed4:	f000 fa63 	bl	800139e <float_to_uint>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	84bb      	strh	r3, [r7, #36]	; 0x24
     uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8000edc:	200c      	movs	r0, #12
 8000ede:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8000fa0 <pack_cmd+0x1ac>
 8000ee2:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8000f9c <pack_cmd+0x1a8>
 8000ee6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000eea:	f000 fa58 	bl	800139e <float_to_uint>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	847b      	strh	r3, [r7, #34]	; 0x22
     uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8000ef2:	200c      	movs	r0, #12
 8000ef4:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8000ef8:	eddf 0a28 	vldr	s1, [pc, #160]	; 8000f9c <pack_cmd+0x1a8>
 8000efc:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f00:	f000 fa4d 	bl	800139e <float_to_uint>
 8000f04:	4603      	mov	r3, r0
 8000f06:	843b      	strh	r3, [r7, #32]
     uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8000f08:	200c      	movs	r0, #12
 8000f0a:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8000fa8 <pack_cmd+0x1b4>
 8000f0e:	eddf 0a25 	vldr	s1, [pc, #148]	; 8000fa4 <pack_cmd+0x1b0>
 8000f12:	ed97 0a00 	vldr	s0, [r7]
 8000f16:	f000 fa42 	bl	800139e <float_to_uint>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	83fb      	strh	r3, [r7, #30]
     /// pack ints into the can buffer ///
     msg->data[0] = p_int>>8;
 8000f1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	705a      	strb	r2, [r3, #1]
     msg->data[1] = p_int&0xFF;
 8000f2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	709a      	strb	r2, [r3, #2]
     msg->data[2] = v_int>>4;
 8000f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	70da      	strb	r2, [r3, #3]
     msg->data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 8000f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	711a      	strb	r2, [r3, #4]
     msg->data[4] = kp_int&0xFF;
 8000f56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	715a      	strb	r2, [r3, #5]
     msg->data[5] = kd_int>>4;
 8000f5e:	8c3b      	ldrh	r3, [r7, #32]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	719a      	strb	r2, [r3, #6]
     msg->data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 8000f6a:	8c3b      	ldrh	r3, [r7, #32]
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	b25a      	sxtb	r2, r3
 8000f70:	8bfb      	ldrh	r3, [r7, #30]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	71da      	strb	r2, [r3, #7]
     msg->data[7] = t_int&0xff;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	721a      	strb	r2, [r3, #8]
     }
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	c2820000 	.word	0xc2820000
 8000f98:	42820000 	.word	0x42820000
 8000f9c:	00000000 	.word	0x00000000
 8000fa0:	43fa0000 	.word	0x43fa0000
 8000fa4:	c2200000 	.word	0xc2200000
 8000fa8:	42200000 	.word	0x42200000

08000fac <unpack_reply>:
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]

void unpack_reply(CANRxMessage msg, float * state){
 8000fac:	b084      	sub	sp, #16
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	f107 0c20 	add.w	ip, r7, #32
 8000fb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /// unpack ints from can buffer ///
    uint16_t id = msg.data[0];
 8000fbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fc0:	82fb      	strh	r3, [r7, #22]
    uint16_t p_int = (msg.data[1]<<8)|msg.data[2];
 8000fc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	82bb      	strh	r3, [r7, #20]
    uint16_t v_int = (msg.data[3]<<4)|(msg.data[4]>>4);
 8000fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	827b      	strh	r3, [r7, #18]
    uint16_t i_int = ((msg.data[4]&0xF)<<8)|msg.data[5];
 8000fee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	823b      	strh	r3, [r7, #16]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001008:	8abb      	ldrh	r3, [r7, #20]
 800100a:	2110      	movs	r1, #16
 800100c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001010:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f9f5 	bl	8001404 <uint_to_float>
 800101a:	ed87 0a03 	vstr	s0, [r7, #12]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800101e:	8a7b      	ldrh	r3, [r7, #18]
 8001020:	210c      	movs	r1, #12
 8001022:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001070 <unpack_reply+0xc4>
 8001026:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001074 <unpack_reply+0xc8>
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f9ea 	bl	8001404 <uint_to_float>
 8001030:	ed87 0a02 	vstr	s0, [r7, #8]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001034:	8a3b      	ldrh	r3, [r7, #16]
 8001036:	210c      	movs	r1, #12
 8001038:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001078 <unpack_reply+0xcc>
 800103c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800107c <unpack_reply+0xd0>
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f9df 	bl	8001404 <uint_to_float>
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
    state[0] = p;
 800104a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	601a      	str	r2, [r3, #0]
    state[1] = v;
 8001050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001052:	3304      	adds	r3, #4
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	601a      	str	r2, [r3, #0]
    state[2] = t;
 8001058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800105a:	3308      	adds	r3, #8
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]

    }
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800106a:	b004      	add	sp, #16
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	42820000 	.word	0x42820000
 8001074:	c2820000 	.word	0xc2820000
 8001078:	42200000 	.word	0x42200000
 800107c:	c2200000 	.word	0xc2200000

08001080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <MX_GPIO_Init+0x124>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a3a      	ldr	r2, [pc, #232]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a33      	ldr	r2, [pc, #204]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_GPIO_Init+0x124>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <MX_GPIO_Init+0x128>)
 800110e:	f001 fea3 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001118:	4824      	ldr	r0, [pc, #144]	; (80011ac <MX_GPIO_Init+0x12c>)
 800111a:	f001 fe9d 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <MX_GPIO_Init+0x130>)
 8001124:	f001 fe98 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	481c      	ldr	r0, [pc, #112]	; (80011b0 <MX_GPIO_Init+0x130>)
 800113e:	f001 fcf7 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8001142:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4813      	ldr	r0, [pc, #76]	; (80011a8 <MX_GPIO_Init+0x128>)
 800115c:	f001 fce8 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001160:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_GPIO_Init+0x12c>)
 800117a:	f001 fcd9 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_GPIO_Init+0x130>)
 8001196:	f001 fccb 	bl	8002b30 <HAL_GPIO_Init>

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020800 	.word	0x40020800

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b093      	sub	sp, #76	; 0x4c
 80011b8:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fc4b 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f877 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f7ff ff5d 	bl	8001080 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 fb8f 	bl	80018e8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80011ca:	f000 f94d 	bl	8001468 <MX_SPI3_Init>
  MX_TIM3_Init();
 80011ce:	f000 fad5 	bl	800177c <MX_TIM3_Init>
  MX_ADC1_Init();
 80011d2:	f7ff fba5 	bl	8000920 <MX_ADC1_Init>
  MX_ADC2_Init();
 80011d6:	f7ff fc0d 	bl	80009f4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80011da:	f7ff fc55 	bl	8000a88 <MX_ADC3_Init>
  MX_CAN1_Init();
 80011de:	f7ff fd43 	bl	8000c68 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* CAN setup */
  can_rx_init(&can_rx);
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <main+0xd4>)
 80011e4:	f7ff fdc6 	bl	8000d74 <can_rx_init>
  can_tx_init(&can_tx);
 80011e8:	4828      	ldr	r0, [pc, #160]	; (800128c <main+0xd8>)
 80011ea:	f7ff fded 	bl	8000dc8 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 80011ee:	4828      	ldr	r0, [pc, #160]	; (8001290 <main+0xdc>)
 80011f0:	f001 f95a 	bl	80024a8 <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f000 fc9f 	bl	8001b38 <HAL_Delay>

	  uint32_t TxMailbox;

	  pack_cmd(&can_tx, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f);	// Pack commands
 80011fa:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80011fe:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001202:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8001206:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800120a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <main+0xd8>)
 8001210:	f7ff fdf0 	bl	8000df4 <pack_cmd>
	  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8001214:	463b      	mov	r3, r7
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <main+0xe0>)
 8001218:	491f      	ldr	r1, [pc, #124]	; (8001298 <main+0xe4>)
 800121a:	481d      	ldr	r0, [pc, #116]	; (8001290 <main+0xdc>)
 800121c:	f001 f988 	bl	8002530 <HAL_CAN_AddTxMessage>
	  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <main+0xe8>)
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <main+0xec>)
 8001224:	2100      	movs	r1, #0
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <main+0xdc>)
 8001228:	f001 fa5d 	bl	80026e6 <HAL_CAN_GetRxMessage>

	  unpack_reply(can_rx, &motor_state);	// Unpack commands
 800122c:	4e16      	ldr	r6, [pc, #88]	; (8001288 <main+0xd4>)
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <main+0xf0>)
 8001230:	930f      	str	r3, [sp, #60]	; 0x3c
 8001232:	466d      	mov	r5, sp
 8001234:	f106 0410 	add.w	r4, r6, #16
 8001238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001244:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001248:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800124c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001250:	f7ff feac 	bl	8000fac <unpack_reply>
	  for(int i = 0; i<3; i++){printf("%f  ", motor_state[i]);}
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	e00f      	b.n	800127a <main+0xc6>
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <main+0xf0>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f987 	bl	8000578 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <main+0xf4>)
 8001270:	f003 fca2 	bl	8004bb8 <iprintf>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3301      	adds	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	ddec      	ble.n	800125a <main+0xa6>
	  printf("\r\n");
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <main+0xf8>)
 8001282:	f003 fd1f 	bl	8004cc4 <puts>
  {
 8001286:	e7b5      	b.n	80011f4 <main+0x40>
 8001288:	200001c8 	.word	0x200001c8
 800128c:	200001a4 	.word	0x200001a4
 8001290:	20000170 	.word	0x20000170
 8001294:	200001a5 	.word	0x200001a5
 8001298:	200001b0 	.word	0x200001b0
 800129c:	200001c9 	.word	0x200001c9
 80012a0:	200001d0 	.word	0x200001d0
 80012a4:	20000198 	.word	0x20000198
 80012a8:	08005c0c 	.word	0x08005c0c
 80012ac:	08005c14 	.word	0x08005c14

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b094      	sub	sp, #80	; 0x50
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2234      	movs	r2, #52	; 0x34
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 fc72 	bl	8004ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <SystemClock_Config+0xdc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a2b      	ldr	r2, [pc, #172]	; (800138c <SystemClock_Config+0xdc>)
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <SystemClock_Config+0xdc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <SystemClock_Config+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <SystemClock_Config+0xe0>)
 80012fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <SystemClock_Config+0xe0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001314:	2310      	movs	r3, #16
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131c:	2300      	movs	r3, #0
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001320:	2308      	movs	r3, #8
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001324:	23b4      	movs	r3, #180	; 0xb4
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001328:	2302      	movs	r3, #2
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001330:	2302      	movs	r3, #2
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4618      	mov	r0, r3
 800133a:	f002 f8c3 	bl	80034c4 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001344:	f000 f826 	bl	8001394 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001348:	f001 fda0 	bl	8002e8c <HAL_PWREx_EnableOverDrive>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001352:	f000 f81f 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135a:	2302      	movs	r3, #2
 800135c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001362:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2105      	movs	r1, #5
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fdd9 	bl	8002f2c <HAL_RCC_ClockConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001380:	f000 f808 	bl	8001394 <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3750      	adds	r7, #80	; 0x50
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>

0800139e <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fmaxf(fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800139e:	b480      	push	{r7}
 80013a0:	b087      	sub	sp, #28
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	ed87 0a03 	vstr	s0, [r7, #12]
 80013a8:	edc7 0a02 	vstr	s1, [r7, #8]
 80013ac:	ed87 1a01 	vstr	s2, [r7, #4]
 80013b0:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80013b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80013c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d2:	2201      	movs	r2, #1
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f4:	ee17 3a90 	vmov	r3, s15
    }
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001410:	edc7 0a01 	vstr	s1, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001416:	ed97 7a01 	vldr	s14, [r7, #4]
 800141a:	edd7 7a02 	vldr	s15, [r7, #8]
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	ee67 6a27 	vmul.f32	s13, s14, s15
 800143c:	2201      	movs	r2, #1
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001452:	edd7 7a04 	vldr	s15, [r7, #16]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_SPI3_Init+0x64>)
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <MX_SPI3_Init+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_SPI3_Init+0x64>)
 8001474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001478:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_SPI3_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_SPI3_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_SPI3_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_SPI3_Init+0x64>)
 800148e:	2201      	movs	r2, #1
 8001490:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_SPI3_Init+0x64>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI3_Init+0x64>)
 800149c:	2228      	movs	r2, #40	; 0x28
 800149e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_SPI3_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI3_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_SPI3_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI3_Init+0x64>)
 80014b4:	220a      	movs	r2, #10
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_SPI3_Init+0x64>)
 80014ba:	f002 fa5d 	bl	8003978 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80014c4:	f7ff ff66 	bl	8001394 <Error_Handler>
  }

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000214 	.word	0x20000214
 80014d0:	40003c00 	.word	0x40003c00

080014d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_SPI_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_SPI_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_SPI_MspInit+0x88>)
 8001500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_SPI_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_SPI_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_SPI_MspInit+0x88>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_SPI_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800152e:	2338      	movs	r3, #56	; 0x38
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800153e:	2306      	movs	r3, #6
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 800154a:	f001 faf1 	bl	8002b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40003c00 	.word	0x40003c00
 800155c:	40023800 	.word	0x40023800
 8001560:	40020400 	.word	0x40020400

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_MspInit+0x4c>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_MspInit+0x4c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a2:	2007      	movs	r0, #7
 80015a4:	f001 fa82 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 fa7a 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00a      	b.n	8001630 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800161a:	f3af 8000 	nop.w
 800161e:	4601      	mov	r1, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf0      	blt.n	800161a <_read+0x12>
	}

return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e009      	b.n	8001668 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f9bd 	bl	80019dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf1      	blt.n	8001654 <_write+0x12>
	}
	return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_close>:

int _close(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return -1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	605a      	str	r2, [r3, #4]
	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_isatty>:

int _isatty(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f003 fa1e 	bl	8004b54 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20020000 	.word	0x20020000
 8001744:	00000400 	.word	0x00000400
 8001748:	2000008c 	.word	0x2000008c
 800174c:	20000300 	.word	0x20000300

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <SystemInit+0x28>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <SystemInit+0x28>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SystemInit+0x28>)
 8001766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800176a:	609a      	str	r2, [r3, #8]
#endif
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_TIM3_Init+0xac>)
 80017a0:	4a22      	ldr	r2, [pc, #136]	; (800182c <MX_TIM3_Init+0xb0>)
 80017a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MX_TIM3_Init+0xac>)
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_TIM3_Init+0xac>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_TIM3_Init+0xac>)
 80017b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_TIM3_Init+0xac>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_TIM3_Init+0xac>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c4:	4818      	ldr	r0, [pc, #96]	; (8001828 <MX_TIM3_Init+0xac>)
 80017c6:	f002 f93b 	bl	8003a40 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017d0:	f7ff fde0 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4619      	mov	r1, r3
 80017e2:	4811      	ldr	r0, [pc, #68]	; (8001828 <MX_TIM3_Init+0xac>)
 80017e4:	f002 fc6e 	bl	80040c4 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017ee:	f7ff fdd1 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f2:	2360      	movs	r3, #96	; 0x60
 80017f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM3_Init+0xac>)
 800180a:	f002 f945 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001814:	f7ff fdbe 	bl	8001394 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM3_Init+0xac>)
 800181a:	f000 f82b 	bl	8001874 <HAL_TIM_MspPostInit>

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000026c 	.word	0x2000026c
 800182c:	40000400 	.word	0x40000400

08001830 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_TIM_PWM_MspInit+0x3c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10d      	bne.n	800185e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_TIM_PWM_MspInit+0x40>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_TIM_PWM_MspInit+0x40>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_TIM_PWM_MspInit+0x40>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40000400 	.word	0x40000400
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11d      	bne.n	80018d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_TIM_MspPostInit+0x70>)
 80018ce:	f001 f92f 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_USART2_UART_Init+0x50>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_USART2_UART_Init+0x4c>)
 8001920:	f002 fc4c 	bl	80041bc <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192a:	f7ff fd33 	bl	8001394 <Error_Handler>
  }

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002ac 	.word	0x200002ac
 8001938:	40004400 	.word	0x40004400

0800193c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_UART_MspInit+0x94>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d133      	bne.n	80019c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_UART_MspInit+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_UART_MspInit+0x98>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x98>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_UART_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0x98>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_UART_MspInit+0x98>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001996:	230c      	movs	r3, #12
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a6:	2307      	movs	r3, #7
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_UART_MspInit+0x9c>)
 80019b2:	f001 f8bd 	bl	8002b30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2026      	movs	r0, #38	; 0x26
 80019bc:	f001 f881 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c0:	2026      	movs	r0, #38	; 0x26
 80019c2:	f001 f89a 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40004400 	.word	0x40004400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80019e4:	1d39      	adds	r1, r7, #4
 80019e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ea:	2201      	movs	r2, #1
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <__io_putchar+0x20>)
 80019ee:	f002 fc32 	bl	8004256 <HAL_UART_Transmit>
return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002ac 	.word	0x200002ac

08001a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a06:	e003      	b.n	8001a10 <LoopCopyDataInit>

08001a08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a0e:	3104      	adds	r1, #4

08001a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a18:	d3f6      	bcc.n	8001a08 <CopyDataInit>
  ldr  r2, =_sbss
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a1c:	e002      	b.n	8001a24 <LoopFillZerobss>

08001a1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a20:	f842 3b04 	str.w	r3, [r2], #4

08001a24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a28:	d3f9      	bcc.n	8001a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a2a:	f7ff fe91 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f003 f897 	bl	8004b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a32:	f7ff fbbf 	bl	80011b4 <main>
  bx  lr    
 8001a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a3c:	08005cd8 	.word	0x08005cd8
  ldr  r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a44:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001a48:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001a4c:	20000300 	.word	0x20000300

08001a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_Init+0x40>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_Init+0x40>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_Init+0x40>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f001 f815 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f808 	bl	8001a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fd6c 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 f82d 	bl	8002b16 <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 fff5 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	200002ec 	.word	0x200002ec

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200002ec 	.word	0x200002ec

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008

08001b80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e033      	b.n	8001bfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe ffbc 	bl	8000b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bc6:	f023 0302 	bic.w	r3, r3, #2
 8001bca:	f043 0202 	orr.w	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f94a 	bl	8001e6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
 8001bee:	e001      	b.n	8001bf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e113      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x244>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d925      	bls.n	8001c80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4403      	add	r3, r0
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e022      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	2207      	movs	r2, #7
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4403      	add	r3, r0
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d824      	bhi.n	8001d18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b05      	subs	r3, #5
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b05      	subs	r3, #5
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
 8001d16:	e04c      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d824      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b23      	subs	r3, #35	; 0x23
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	400a      	ands	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b23      	subs	r3, #35	; 0x23
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	e023      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b41      	subs	r3, #65	; 0x41
 8001d7c:	221f      	movs	r2, #31
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	400a      	ands	r2, r1
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b41      	subs	r3, #65	; 0x41
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_ADC_ConfigChannel+0x250>)
 8001db4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <HAL_ADC_ConfigChannel+0x254>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d10f      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d8>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d10b      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_ADC_ConfigChannel+0x254>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_ADC_ConfigChannel+0x258>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d003      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x1f4>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b11      	cmp	r3, #17
 8001dfa:	d122      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_ADC_ConfigChannel+0x258>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_ADC_ConfigChannel+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_ADC_ConfigChannel+0x260>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9a      	lsrs	r2, r3, #18
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	40012000 	.word	0x40012000
 8001e60:	10000012 	.word	0x10000012
 8001e64:	20000000 	.word	0x20000000
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e74:	4b79      	ldr	r3, [pc, #484]	; (800205c <ADC_Init+0x1f0>)
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	4a58      	ldr	r2, [pc, #352]	; (8002060 <ADC_Init+0x1f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e00f      	b.n	8001f6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0202 	bic.w	r2, r2, #2
 8001f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	035a      	lsls	r2, r3, #13
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e007      	b.n	8001fe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	051a      	lsls	r2, r3, #20
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002022:	025a      	lsls	r2, r3, #9
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	029a      	lsls	r2, r3, #10
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	0f000001 	.word	0x0f000001

08002064 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002078:	2302      	movs	r3, #2
 800207a:	e031      	b.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002086:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 021f 	bic.w	r2, r3, #31
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012300 	.word	0x40012300

080020f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0ed      	b.n	80022de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fde0 	bl	8000cd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0202 	bic.w	r2, r2, #2
 8002122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002124:	f7ff fcfc 	bl	8001b20 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800212a:	e012      	b.n	8002152 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800212c:	f7ff fcf8 	bl	8001b20 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d90b      	bls.n	8002152 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2205      	movs	r2, #5
 800214a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0c5      	b.n	80022de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e5      	bne.n	800212c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002170:	f7ff fcd6 	bl	8001b20 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002176:	e012      	b.n	800219e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002178:	f7ff fcd2 	bl	8001b20 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b0a      	cmp	r3, #10
 8002184:	d90b      	bls.n	800219e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2205      	movs	r2, #5
 8002196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e09f      	b.n	80022de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0e5      	beq.n	8002178 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7e5b      	ldrb	r3, [r3, #25]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e007      	b.n	8002200 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e9b      	ldrb	r3, [r3, #26]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0220 	orr.w	r2, r2, #32
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e007      	b.n	800222a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0220 	bic.w	r2, r2, #32
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7edb      	ldrb	r3, [r3, #27]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0210 	bic.w	r2, r2, #16
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0210 	orr.w	r2, r2, #16
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7f1b      	ldrb	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d108      	bne.n	800226e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e007      	b.n	800227e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0208 	bic.w	r2, r2, #8
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7f5b      	ldrb	r3, [r3, #29]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0204 	orr.w	r2, r2, #4
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e007      	b.n	80022a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0204 	bic.w	r2, r2, #4
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	ea42 0103 	orr.w	r1, r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <HAL_CAN_ConfigFilter+0x26>
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 80be 	bne.w	800248a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002310:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002328:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	431a      	orrs	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	401a      	ands	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d123      	bne.n	80023b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002392:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3248      	adds	r2, #72	; 0x48
 8002398:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ae:	6979      	ldr	r1, [r7, #20]
 80023b0:	3348      	adds	r3, #72	; 0x48
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d122      	bne.n	8002406 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3248      	adds	r2, #72	; 0x48
 80023e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023fc:	6979      	ldr	r1, [r7, #20]
 80023fe:	3348      	adds	r3, #72	; 0x48
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002420:	e007      	b.n	8002432 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	431a      	orrs	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800244c:	e007      	b.n	800245e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	431a      	orrs	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800247c:	f023 0201 	bic.w	r2, r3, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e006      	b.n	8002498 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40006400 	.word	0x40006400

080024a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d12e      	bne.n	800251a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fb24 	bl	8001b20 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024da:	e012      	b.n	8002502 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024dc:	f7ff fb20 	bl	8001b20 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	d90b      	bls.n	8002502 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2205      	movs	r2, #5
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e012      	b.n	8002528 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e5      	bne.n	80024dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e006      	b.n	8002528 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800254e:	7ffb      	ldrb	r3, [r7, #31]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d003      	beq.n	800255c <HAL_CAN_AddTxMessage+0x2c>
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	2b02      	cmp	r3, #2
 8002558:	f040 80b8 	bne.w	80026cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10a      	bne.n	800257c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80a0 	beq.w	80026bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	0e1b      	lsrs	r3, r3, #24
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d907      	bls.n	800259c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e09e      	b.n	80026da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800259c:	2201      	movs	r2, #1
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	409a      	lsls	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3318      	adds	r3, #24
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	440b      	add	r3, r1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e00f      	b.n	80025ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3318      	adds	r3, #24
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	440b      	add	r3, r1
 80025e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3318      	adds	r3, #24
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	440b      	add	r3, r1
 80025fa:	3304      	adds	r3, #4
 80025fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	7d1b      	ldrb	r3, [r3, #20]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d111      	bne.n	800262a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3318      	adds	r3, #24
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6811      	ldr	r1, [r2, #0]
 800261a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3318      	adds	r3, #24
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	440b      	add	r3, r1
 8002626:	3304      	adds	r3, #4
 8002628:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3307      	adds	r3, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	061a      	lsls	r2, r3, #24
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3306      	adds	r3, #6
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3305      	adds	r3, #5
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	4313      	orrs	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	3204      	adds	r2, #4
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	4610      	mov	r0, r2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6811      	ldr	r1, [r2, #0]
 8002652:	ea43 0200 	orr.w	r2, r3, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	440b      	add	r3, r1
 800265c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002660:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3303      	adds	r3, #3
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	061a      	lsls	r2, r3, #24
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3302      	adds	r3, #2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3301      	adds	r3, #1
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	4313      	orrs	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	4610      	mov	r0, r2
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6811      	ldr	r1, [r2, #0]
 8002688:	ea43 0200 	orr.w	r2, r3, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	440b      	add	r3, r1
 8002692:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002696:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3318      	adds	r3, #24
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4413      	add	r3, r2
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	6811      	ldr	r1, [r2, #0]
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3318      	adds	r3, #24
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	440b      	add	r3, r1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e00e      	b.n	80026da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e006      	b.n	80026da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026e6:	b480      	push	{r7}
 80026e8:	b087      	sub	sp, #28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d003      	beq.n	800270a <HAL_CAN_GetRxMessage+0x24>
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b02      	cmp	r3, #2
 8002706:	f040 80f3 	bne.w	80028f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10e      	bne.n	800272e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0e7      	b.n	80028fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0d8      	b.n	80028fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	331b      	adds	r3, #27
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4413      	add	r3, r2
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0204 	and.w	r2, r3, #4
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	331b      	adds	r3, #27
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4413      	add	r3, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0d5b      	lsrs	r3, r3, #21
 800277a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e00b      	b.n	800279c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	331b      	adds	r3, #27
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	08db      	lsrs	r3, r3, #3
 8002794:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	331b      	adds	r3, #27
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0202 	and.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	331b      	adds	r3, #27
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	3304      	adds	r3, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 020f 	and.w	r2, r3, #15
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	331b      	adds	r3, #27
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	331b      	adds	r3, #27
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	4413      	add	r3, r2
 80027ee:	3304      	adds	r3, #4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4413      	add	r3, r2
 8002804:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0a1a      	lsrs	r2, r3, #8
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0c1a      	lsrs	r2, r3, #16
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	3302      	adds	r3, #2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e1a      	lsrs	r2, r3, #24
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3303      	adds	r3, #3
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	3304      	adds	r3, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0a1a      	lsrs	r2, r3, #8
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3305      	adds	r3, #5
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0c1a      	lsrs	r2, r3, #16
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3306      	adds	r3, #6
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e1a      	lsrs	r2, r3, #24
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	3307      	adds	r3, #7
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0220 	orr.w	r2, r2, #32
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	e007      	b.n	80028ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e006      	b.n	80028fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff29 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff3e 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff31 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e165      	b.n	8002e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8154 	bne.w	8002e12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d00b      	beq.n	8002b8a <HAL_GPIO_Init+0x5a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b7e:	2b11      	cmp	r3, #17
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d130      	bne.n	8002bec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 0201 	and.w	r2, r3, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0xfc>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b12      	cmp	r3, #18
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80ae 	beq.w	8002e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a5c      	ldr	r2, [pc, #368]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd2:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4f      	ldr	r2, [pc, #316]	; (8002e38 <HAL_GPIO_Init+0x308>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d025      	beq.n	8002d4a <HAL_GPIO_Init+0x21a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4e      	ldr	r2, [pc, #312]	; (8002e3c <HAL_GPIO_Init+0x30c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01f      	beq.n	8002d46 <HAL_GPIO_Init+0x216>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_GPIO_Init+0x310>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d019      	beq.n	8002d42 <HAL_GPIO_Init+0x212>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <HAL_GPIO_Init+0x314>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_GPIO_Init+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4b      	ldr	r2, [pc, #300]	; (8002e48 <HAL_GPIO_Init+0x318>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00d      	beq.n	8002d3a <HAL_GPIO_Init+0x20a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4a      	ldr	r2, [pc, #296]	; (8002e4c <HAL_GPIO_Init+0x31c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <HAL_GPIO_Init+0x206>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a49      	ldr	r2, [pc, #292]	; (8002e50 <HAL_GPIO_Init+0x320>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_GPIO_Init+0x202>
 8002d2e:	2306      	movs	r3, #6
 8002d30:	e00c      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e00a      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d36:	2305      	movs	r3, #5
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d8e:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002de2:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e0c:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f ae96 	bls.w	8002b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e74:	e003      	b.n	8002e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	041a      	lsls	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7fe fe32 	bl	8001b20 <HAL_GetTick>
 8002ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ebe:	e009      	b.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec0:	f7fe fe2e 	bl	8001b20 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ece:	d901      	bls.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e01f      	b.n	8002f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7fe fe1a 	bl	8001b20 <HAL_GetTick>
 8002eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eee:	e009      	b.n	8002f04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef0:	f7fe fe16 	bl	8001b20 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efe:	d901      	bls.n	8002f04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e007      	b.n	8002f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f10:	d1ee      	bne.n	8002ef0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	420e0040 	.word	0x420e0040
 8002f24:	40007000 	.word	0x40007000
 8002f28:	420e0044 	.word	0x420e0044

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0cc      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d90c      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d044      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e067      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4934      	ldr	r1, [pc, #208]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fe fd80 	bl	8001b20 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe fd7c 	bl	8001b20 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d20c      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 f855 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	490a      	ldr	r1, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fce0 	bl	8001a98 <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00
 80030e8:	40023800 	.word	0x40023800
 80030ec:	08005c18 	.word	0x08005c18
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08005c28 	.word	0x08005c28

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffdc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0b5b      	lsrs	r3, r3, #13
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	08005c28 	.word	0x08005c28

08003160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b088      	sub	sp, #32
 8003166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317c:	4bce      	ldr	r3, [pc, #824]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b0c      	cmp	r3, #12
 8003186:	f200 818d 	bhi.w	80034a4 <HAL_RCC_GetSysClockFreq+0x344>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <HAL_RCC_GetSysClockFreq+0x30>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080034a5 	.word	0x080034a5
 8003198:	080034a5 	.word	0x080034a5
 800319c:	080034a5 	.word	0x080034a5
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080034a5 	.word	0x080034a5
 80031a8:	080034a5 	.word	0x080034a5
 80031ac:	080034a5 	.word	0x080034a5
 80031b0:	080031d1 	.word	0x080031d1
 80031b4:	080034a5 	.word	0x080034a5
 80031b8:	080034a5 	.word	0x080034a5
 80031bc:	080034a5 	.word	0x080034a5
 80031c0:	08003345 	.word	0x08003345
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4bbd      	ldr	r3, [pc, #756]	; (80034bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80031c6:	61bb      	str	r3, [r7, #24]
       break;
 80031c8:	e16f      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4bbd      	ldr	r3, [pc, #756]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x360>)
 80031cc:	61bb      	str	r3, [r7, #24]
      break;
 80031ce:	e16c      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4bb9      	ldr	r3, [pc, #740]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4bb7      	ldr	r3, [pc, #732]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d053      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4bb4      	ldr	r3, [pc, #720]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	ea02 0400 	and.w	r4, r2, r0
 80031fe:	603c      	str	r4, [r7, #0]
 8003200:	400b      	ands	r3, r1
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003208:	4620      	mov	r0, r4
 800320a:	4629      	mov	r1, r5
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	014b      	lsls	r3, r1, #5
 8003216:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800321a:	0142      	lsls	r2, r0, #5
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	4623      	mov	r3, r4
 8003222:	1ac0      	subs	r0, r0, r3
 8003224:	462b      	mov	r3, r5
 8003226:	eb61 0103 	sbc.w	r1, r1, r3
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	018b      	lsls	r3, r1, #6
 8003234:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003238:	0182      	lsls	r2, r0, #6
 800323a:	1a12      	subs	r2, r2, r0
 800323c:	eb63 0301 	sbc.w	r3, r3, r1
 8003240:	f04f 0000 	mov.w	r0, #0
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	00d9      	lsls	r1, r3, #3
 800324a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800324e:	00d0      	lsls	r0, r2, #3
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4621      	mov	r1, r4
 8003256:	1852      	adds	r2, r2, r1
 8003258:	4629      	mov	r1, r5
 800325a:	eb43 0101 	adc.w	r1, r3, r1
 800325e:	460b      	mov	r3, r1
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	0259      	lsls	r1, r3, #9
 800326a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800326e:	0250      	lsls	r0, r2, #9
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f7fd f9d2 	bl	8000628 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	e04c      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b8a      	ldr	r3, [pc, #552]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	461a      	mov	r2, r3
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	ea02 0a00 	and.w	sl, r2, r0
 80032a6:	ea03 0b01 	and.w	fp, r3, r1
 80032aa:	4650      	mov	r0, sl
 80032ac:	4659      	mov	r1, fp
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	014b      	lsls	r3, r1, #5
 80032b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032bc:	0142      	lsls	r2, r0, #5
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	ebb0 000a 	subs.w	r0, r0, sl
 80032c6:	eb61 010b 	sbc.w	r1, r1, fp
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	018b      	lsls	r3, r1, #6
 80032d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032d8:	0182      	lsls	r2, r0, #6
 80032da:	1a12      	subs	r2, r2, r0
 80032dc:	eb63 0301 	sbc.w	r3, r3, r1
 80032e0:	f04f 0000 	mov.w	r0, #0
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	00d9      	lsls	r1, r3, #3
 80032ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ee:	00d0      	lsls	r0, r2, #3
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	eb12 020a 	adds.w	r2, r2, sl
 80032f8:	eb43 030b 	adc.w	r3, r3, fp
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0299      	lsls	r1, r3, #10
 8003306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800330a:	0290      	lsls	r0, r2, #10
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fd f984 	bl	8000628 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003328:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	61bb      	str	r3, [r7, #24]
      break;
 8003342:	e0b2      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b5c      	ldr	r3, [pc, #368]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334e:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d04d      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	461a      	mov	r2, r3
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	f240 10ff 	movw	r0, #511	; 0x1ff
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	ea02 0800 	and.w	r8, r2, r0
 8003372:	ea03 0901 	and.w	r9, r3, r1
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	014b      	lsls	r3, r1, #5
 8003384:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003388:	0142      	lsls	r2, r0, #5
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	ebb0 0008 	subs.w	r0, r0, r8
 8003392:	eb61 0109 	sbc.w	r1, r1, r9
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	018b      	lsls	r3, r1, #6
 80033a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033a4:	0182      	lsls	r2, r0, #6
 80033a6:	1a12      	subs	r2, r2, r0
 80033a8:	eb63 0301 	sbc.w	r3, r3, r1
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	00d9      	lsls	r1, r3, #3
 80033b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ba:	00d0      	lsls	r0, r2, #3
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	eb12 0208 	adds.w	r2, r2, r8
 80033c4:	eb43 0309 	adc.w	r3, r3, r9
 80033c8:	f04f 0000 	mov.w	r0, #0
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	0259      	lsls	r1, r3, #9
 80033d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033d6:	0250      	lsls	r0, r2, #9
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f7fd f91e 	bl	8000628 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4613      	mov	r3, r2
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	e04a      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	461a      	mov	r2, r3
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	ea02 0400 	and.w	r4, r2, r0
 800340e:	ea03 0501 	and.w	r5, r3, r1
 8003412:	4620      	mov	r0, r4
 8003414:	4629      	mov	r1, r5
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	014b      	lsls	r3, r1, #5
 8003420:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003424:	0142      	lsls	r2, r0, #5
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	1b00      	subs	r0, r0, r4
 800342c:	eb61 0105 	sbc.w	r1, r1, r5
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	018b      	lsls	r3, r1, #6
 800343a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800343e:	0182      	lsls	r2, r0, #6
 8003440:	1a12      	subs	r2, r2, r0
 8003442:	eb63 0301 	sbc.w	r3, r3, r1
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	00d9      	lsls	r1, r3, #3
 8003450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003454:	00d0      	lsls	r0, r2, #3
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	1912      	adds	r2, r2, r4
 800345c:	eb45 0303 	adc.w	r3, r5, r3
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	0299      	lsls	r1, r3, #10
 800346a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800346e:	0290      	lsls	r0, r2, #10
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	461a      	mov	r2, r3
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	f7fd f8d2 	bl	8000628 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0f1b      	lsrs	r3, r3, #28
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	61bb      	str	r3, [r7, #24]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80034a6:	61bb      	str	r3, [r7, #24]
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	69bb      	ldr	r3, [r7, #24]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200

080034c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8083 	beq.w	80035e4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034de:	4b95      	ldr	r3, [pc, #596]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d019      	beq.n	800351e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ea:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034f6:	4b8f      	ldr	r3, [pc, #572]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003502:	d00c      	beq.n	800351e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003504:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d112      	bne.n	8003536 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003510:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351c:	d10b      	bne.n	8003536 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d05b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x11e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d157      	bne.n	80035e2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e216      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x8a>
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7b      	ldr	r2, [pc, #492]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e01d      	b.n	800358a <HAL_RCC_OscConfig+0xc6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0xae>
 8003558:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a72      	ldr	r2, [pc, #456]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e00b      	b.n	800358a <HAL_RCC_OscConfig+0xc6>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d013      	beq.n	80035ba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe fac5 	bl	8001b20 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359a:	f7fe fac1 	bl	8001b20 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b64      	cmp	r3, #100	; 0x64
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1db      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0xd6>
 80035b8:	e014      	b.n	80035e4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe fab1 	bl	8001b20 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c2:	f7fe faad 	bl	8001b20 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1c7      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0xfe>
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d06f      	beq.n	80036d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d017      	beq.n	800362c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003604:	2b08      	cmp	r3, #8
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d11c      	bne.n	800365a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003620:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_OscConfig+0x180>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e18f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4938      	ldr	r1, [pc, #224]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003658:	e03a      	b.n	80036d0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d020      	beq.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003662:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fa5a 	bl	8001b20 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003670:	f7fe fa56 	bl	8001b20 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e170      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
 80036a2:	e015      	b.n	80036d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe fa39 	bl	8001b20 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fa35 	bl	8001b20 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e14f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d037      	beq.n	800374c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x278>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fa19 	bl	8001b20 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fa15 	bl	8001b20 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e12f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x22e>
 8003710:	e01c      	b.n	800374c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_OscConfig+0x278>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fe fa02 	bl	8001b20 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371e:	e00f      	b.n	8003740 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fe f9fe 	bl	8001b20 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d908      	bls.n	8003740 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e118      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b8a      	ldr	r3, [pc, #552]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e9      	bne.n	8003720 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7e      	ldr	r2, [pc, #504]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b79      	ldr	r3, [pc, #484]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a75      	ldr	r2, [pc, #468]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fe f9bd 	bl	8001b20 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fe f9b9 	bl	8001b20 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0d3      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x31a>
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x354>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x33c>
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a60      	ldr	r2, [pc, #384]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5d      	ldr	r2, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x354>
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a59      	ldr	r2, [pc, #356]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe f97e 	bl	8001b20 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe f97a 	bl	8001b20 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e092      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x364>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fe f968 	bl	8001b20 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe f964 	bl	8001b20 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e07c      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d068      	beq.n	8003962 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d060      	beq.n	800395e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d145      	bne.n	8003930 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a4:	4b33      	ldr	r3, [pc, #204]	; (8003974 <HAL_RCC_OscConfig+0x4b0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe f939 	bl	8001b20 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe f935 	bl	8001b20 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e04f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c4:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	071b      	lsls	r3, r3, #28
 80038fc:	491b      	ldr	r1, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_RCC_OscConfig+0x4b0>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe f90a 	bl	8001b20 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe f906 	bl	8001b20 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e020      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x44c>
 800392e:	e018      	b.n	8003962 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_OscConfig+0x4b0>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe f8f3 	bl	8001b20 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe f8ef 	bl	8001b20 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e009      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x47a>
 800395c:	e001      	b.n	8003962 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	40007000 	.word	0x40007000
 8003974:	42470060 	.word	0x42470060

08003978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e056      	b.n	8003a38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7fd fd95 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	ea42 0103 	orr.w	r1, r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0104 	and.w	r1, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e01d      	b.n	8003a8e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fee2 	bl	8001830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 f8d0 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0b4      	b.n	8003c1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f200 809f 	bhi.w	8003c08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003c09 	.word	0x08003c09
 8003ad8:	08003c09 	.word	0x08003c09
 8003adc:	08003c09 	.word	0x08003c09
 8003ae0:	08003b45 	.word	0x08003b45
 8003ae4:	08003c09 	.word	0x08003c09
 8003ae8:	08003c09 	.word	0x08003c09
 8003aec:	08003c09 	.word	0x08003c09
 8003af0:	08003b87 	.word	0x08003b87
 8003af4:	08003c09 	.word	0x08003c09
 8003af8:	08003c09 	.word	0x08003c09
 8003afc:	08003c09 	.word	0x08003c09
 8003b00:	08003bc7 	.word	0x08003bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f92a 	bl	8003d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
      break;
 8003b42:	e062      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f97a 	bl	8003e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
      break;
 8003b84:	e041      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f9cf 	bl	8003f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0208 	orr.w	r2, r2, #8
 8003ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0204 	bic.w	r2, r2, #4
 8003bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69d9      	ldr	r1, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
      break;
 8003bc4:	e021      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa23 	bl	8004018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	61da      	str	r2, [r3, #28]
      break;
 8003c06:	e000      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a40      	ldr	r2, [pc, #256]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <TIM_Base_SetConfig+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <TIM_Base_SetConfig+0x11c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3b      	ldr	r2, [pc, #236]	; (8003d44 <TIM_Base_SetConfig+0x120>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3a      	ldr	r2, [pc, #232]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d027      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <TIM_Base_SetConfig+0x118>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d023      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <TIM_Base_SetConfig+0x11c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01f      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <TIM_Base_SetConfig+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d017      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <TIM_Base_SetConfig+0x128>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0x130>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <TIM_Base_SetConfig+0x134>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <TIM_Base_SetConfig+0x138>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d103      	bne.n	8003d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800
 8003d58:	40001800 	.word	0x40001800
 8003d5c:	40001c00 	.word	0x40001c00
 8003d60:	40002000 	.word	0x40002000

08003d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <TIM_OC1_SetConfig+0xd8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC1_SetConfig+0x64>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <TIM_OC1_SetConfig+0xdc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10c      	bne.n	8003de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0308 	bic.w	r3, r3, #8
 8003dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <TIM_OC1_SetConfig+0xd8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC1_SetConfig+0x8e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <TIM_OC1_SetConfig+0xdc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010400 	.word	0x40010400

08003e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0210 	bic.w	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0320 	bic.w	r3, r3, #32
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <TIM_OC2_SetConfig+0xe4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0x68>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <TIM_OC2_SetConfig+0xe8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10d      	bne.n	8003ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <TIM_OC2_SetConfig+0xe4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC2_SetConfig+0x94>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <TIM_OC2_SetConfig+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40010400 	.word	0x40010400

08003f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a21      	ldr	r2, [pc, #132]	; (8004010 <TIM_OC3_SetConfig+0xe0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC3_SetConfig+0x66>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <TIM_OC3_SetConfig+0xe4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10d      	bne.n	8003fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	; (8004010 <TIM_OC3_SetConfig+0xe0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC3_SetConfig+0x92>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <TIM_OC3_SetConfig+0xe4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d113      	bne.n	8003fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400

08004018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <TIM_OC4_SetConfig+0xa4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC4_SetConfig+0x68>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <TIM_OC4_SetConfig+0xa8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e05a      	b.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d01d      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10c      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40001800 	.word	0x40001800

080041bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e03f      	b.n	800424e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd fbaa 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f90b 	bl	800441c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af02      	add	r7, sp, #8
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b20      	cmp	r3, #32
 8004274:	f040 8083 	bne.w	800437e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Transmit+0x2e>
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e07b      	b.n	8004380 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Transmit+0x40>
 8004292:	2302      	movs	r3, #2
 8004294:	e074      	b.n	8004380 <HAL_UART_Transmit+0x12a>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2221      	movs	r2, #33	; 0x21
 80042a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fc38 	bl	8001b20 <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80042c6:	e042      	b.n	800434e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d122      	bne.n	8004326 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f84c 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e042      	b.n	8004380 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800430c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3302      	adds	r3, #2
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	e017      	b.n	800434e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	e013      	b.n	800434e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f829 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e01f      	b.n	8004380 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	60ba      	str	r2, [r7, #8]
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1b7      	bne.n	80042c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f810 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e006      	b.n	8004380 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004398:	e02c      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d028      	beq.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a8:	f7fd fbba 	bl	8001b20 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d21d      	bcs.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e00f      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	429a      	cmp	r2, r3
 8004410:	d0c3      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	b0bd      	sub	sp, #244	; 0xf4
 8004422:	af00      	add	r7, sp, #0
 8004424:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004438:	68d9      	ldr	r1, [r3, #12]
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	ea40 0301 	orr.w	r3, r0, r1
 8004444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	431a      	orrs	r2, r3
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004474:	f021 010c 	bic.w	r1, r1, #12
 8004478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004482:	430b      	orrs	r3, r1
 8004484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	6999      	ldr	r1, [r3, #24]
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	ea40 0301 	orr.w	r3, r0, r1
 80044a2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ae:	f040 81a5 	bne.w	80047fc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4bcd      	ldr	r3, [pc, #820]	; (80047f0 <UART_SetConfig+0x3d4>)
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d006      	beq.n	80044cc <UART_SetConfig+0xb0>
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4bcb      	ldr	r3, [pc, #812]	; (80047f4 <UART_SetConfig+0x3d8>)
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f040 80cb 	bne.w	8004662 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fe34 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 80044d0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044d8:	461c      	mov	r4, r3
 80044da:	f04f 0500 	mov.w	r5, #0
 80044de:	4622      	mov	r2, r4
 80044e0:	462b      	mov	r3, r5
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80044e8:	415b      	adcs	r3, r3
 80044ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80044f2:	1912      	adds	r2, r2, r4
 80044f4:	eb45 0303 	adc.w	r3, r5, r3
 80044f8:	f04f 0000 	mov.w	r0, #0
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	00d9      	lsls	r1, r3, #3
 8004502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004506:	00d0      	lsls	r0, r2, #3
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	1911      	adds	r1, r2, r4
 800450e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004512:	416b      	adcs	r3, r5
 8004514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	1891      	adds	r1, r2, r2
 8004526:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800452a:	415b      	adcs	r3, r3
 800452c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004530:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004534:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004538:	f7fc f876 	bl	8000628 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4bad      	ldr	r3, [pc, #692]	; (80047f8 <UART_SetConfig+0x3dc>)
 8004542:	fba3 2302 	umull	r2, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	011e      	lsls	r6, r3, #4
 800454a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800454e:	461c      	mov	r4, r3
 8004550:	f04f 0500 	mov.w	r5, #0
 8004554:	4622      	mov	r2, r4
 8004556:	462b      	mov	r3, r5
 8004558:	1891      	adds	r1, r2, r2
 800455a:	67b9      	str	r1, [r7, #120]	; 0x78
 800455c:	415b      	adcs	r3, r3
 800455e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004560:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004564:	1912      	adds	r2, r2, r4
 8004566:	eb45 0303 	adc.w	r3, r5, r3
 800456a:	f04f 0000 	mov.w	r0, #0
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	00d9      	lsls	r1, r3, #3
 8004574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004578:	00d0      	lsls	r0, r2, #3
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	1911      	adds	r1, r2, r4
 8004580:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004584:	416b      	adcs	r3, r5
 8004586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	1891      	adds	r1, r2, r2
 8004598:	6739      	str	r1, [r7, #112]	; 0x70
 800459a:	415b      	adcs	r3, r3
 800459c:	677b      	str	r3, [r7, #116]	; 0x74
 800459e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80045a2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80045a6:	f7fc f83f 	bl	8000628 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4b92      	ldr	r3, [pc, #584]	; (80047f8 <UART_SetConfig+0x3dc>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	4a8d      	ldr	r2, [pc, #564]	; (80047f8 <UART_SetConfig+0x3dc>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045d0:	441e      	add	r6, r3
 80045d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045d6:	4618      	mov	r0, r3
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	1894      	adds	r4, r2, r2
 80045e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80045e4:	415b      	adcs	r3, r3
 80045e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80045ec:	1812      	adds	r2, r2, r0
 80045ee:	eb41 0303 	adc.w	r3, r1, r3
 80045f2:	f04f 0400 	mov.w	r4, #0
 80045f6:	f04f 0500 	mov.w	r5, #0
 80045fa:	00dd      	lsls	r5, r3, #3
 80045fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004600:	00d4      	lsls	r4, r2, #3
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	1814      	adds	r4, r2, r0
 8004608:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800460c:	414b      	adcs	r3, r1
 800460e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	1891      	adds	r1, r2, r2
 8004620:	6639      	str	r1, [r7, #96]	; 0x60
 8004622:	415b      	adcs	r3, r3
 8004624:	667b      	str	r3, [r7, #100]	; 0x64
 8004626:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800462a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800462e:	f7fb fffb 	bl	8000628 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4b70      	ldr	r3, [pc, #448]	; (80047f8 <UART_SetConfig+0x3dc>)
 8004638:	fba3 1302 	umull	r1, r3, r3, r2
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	2164      	movs	r1, #100	; 0x64
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	3332      	adds	r3, #50	; 0x32
 800464a:	4a6b      	ldr	r2, [pc, #428]	; (80047f8 <UART_SetConfig+0x3dc>)
 800464c:	fba2 2303 	umull	r2, r3, r2, r3
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	f003 0207 	and.w	r2, r3, #7
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4432      	add	r2, r6
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	e26d      	b.n	8004b3e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004662:	f7fe fd55 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004666:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800466a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800466e:	461c      	mov	r4, r3
 8004670:	f04f 0500 	mov.w	r5, #0
 8004674:	4622      	mov	r2, r4
 8004676:	462b      	mov	r3, r5
 8004678:	1891      	adds	r1, r2, r2
 800467a:	65b9      	str	r1, [r7, #88]	; 0x58
 800467c:	415b      	adcs	r3, r3
 800467e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004684:	1912      	adds	r2, r2, r4
 8004686:	eb45 0303 	adc.w	r3, r5, r3
 800468a:	f04f 0000 	mov.w	r0, #0
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	00d9      	lsls	r1, r3, #3
 8004694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004698:	00d0      	lsls	r0, r2, #3
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	1911      	adds	r1, r2, r4
 80046a0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80046a4:	416b      	adcs	r3, r5
 80046a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	461a      	mov	r2, r3
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	1891      	adds	r1, r2, r2
 80046b8:	6539      	str	r1, [r7, #80]	; 0x50
 80046ba:	415b      	adcs	r3, r3
 80046bc:	657b      	str	r3, [r7, #84]	; 0x54
 80046be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046c2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80046c6:	f7fb ffaf 	bl	8000628 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4b4a      	ldr	r3, [pc, #296]	; (80047f8 <UART_SetConfig+0x3dc>)
 80046d0:	fba3 2302 	umull	r2, r3, r3, r2
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	011e      	lsls	r6, r3, #4
 80046d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046dc:	461c      	mov	r4, r3
 80046de:	f04f 0500 	mov.w	r5, #0
 80046e2:	4622      	mov	r2, r4
 80046e4:	462b      	mov	r3, r5
 80046e6:	1891      	adds	r1, r2, r2
 80046e8:	64b9      	str	r1, [r7, #72]	; 0x48
 80046ea:	415b      	adcs	r3, r3
 80046ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046f2:	1912      	adds	r2, r2, r4
 80046f4:	eb45 0303 	adc.w	r3, r5, r3
 80046f8:	f04f 0000 	mov.w	r0, #0
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	00d9      	lsls	r1, r3, #3
 8004702:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004706:	00d0      	lsls	r0, r2, #3
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	1911      	adds	r1, r2, r4
 800470e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004712:	416b      	adcs	r3, r5
 8004714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	461a      	mov	r2, r3
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	1891      	adds	r1, r2, r2
 8004726:	6439      	str	r1, [r7, #64]	; 0x40
 8004728:	415b      	adcs	r3, r3
 800472a:	647b      	str	r3, [r7, #68]	; 0x44
 800472c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004730:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004734:	f7fb ff78 	bl	8000628 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4b2e      	ldr	r3, [pc, #184]	; (80047f8 <UART_SetConfig+0x3dc>)
 800473e:	fba3 1302 	umull	r1, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2164      	movs	r1, #100	; 0x64
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <UART_SetConfig+0x3dc>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800475e:	441e      	add	r6, r3
 8004760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004764:	4618      	mov	r0, r3
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	1894      	adds	r4, r2, r2
 8004770:	63bc      	str	r4, [r7, #56]	; 0x38
 8004772:	415b      	adcs	r3, r3
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004776:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800477a:	1812      	adds	r2, r2, r0
 800477c:	eb41 0303 	adc.w	r3, r1, r3
 8004780:	f04f 0400 	mov.w	r4, #0
 8004784:	f04f 0500 	mov.w	r5, #0
 8004788:	00dd      	lsls	r5, r3, #3
 800478a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800478e:	00d4      	lsls	r4, r2, #3
 8004790:	4622      	mov	r2, r4
 8004792:	462b      	mov	r3, r5
 8004794:	1814      	adds	r4, r2, r0
 8004796:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800479a:	414b      	adcs	r3, r1
 800479c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	1891      	adds	r1, r2, r2
 80047ae:	6339      	str	r1, [r7, #48]	; 0x30
 80047b0:	415b      	adcs	r3, r3
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
 80047b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047b8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047bc:	f7fb ff34 	bl	8000628 <__aeabi_uldivmod>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <UART_SetConfig+0x3dc>)
 80047c6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2164      	movs	r1, #100	; 0x64
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	3332      	adds	r3, #50	; 0x32
 80047d8:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <UART_SetConfig+0x3dc>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	f003 0207 	and.w	r2, r3, #7
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4432      	add	r2, r6
 80047ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80047ee:	e1a6      	b.n	8004b3e <UART_SetConfig+0x722>
 80047f0:	40011000 	.word	0x40011000
 80047f4:	40011400 	.word	0x40011400
 80047f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4bd1      	ldr	r3, [pc, #836]	; (8004b48 <UART_SetConfig+0x72c>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d006      	beq.n	8004816 <UART_SetConfig+0x3fa>
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4bcf      	ldr	r3, [pc, #828]	; (8004b4c <UART_SetConfig+0x730>)
 8004810:	429a      	cmp	r2, r3
 8004812:	f040 80ca 	bne.w	80049aa <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004816:	f7fe fc8f 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 800481a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800481e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004822:	461c      	mov	r4, r3
 8004824:	f04f 0500 	mov.w	r5, #0
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	1891      	adds	r1, r2, r2
 800482e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004830:	415b      	adcs	r3, r3
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004838:	1912      	adds	r2, r2, r4
 800483a:	eb45 0303 	adc.w	r3, r5, r3
 800483e:	f04f 0000 	mov.w	r0, #0
 8004842:	f04f 0100 	mov.w	r1, #0
 8004846:	00d9      	lsls	r1, r3, #3
 8004848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800484c:	00d0      	lsls	r0, r2, #3
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	eb12 0a04 	adds.w	sl, r2, r4
 8004856:	eb43 0b05 	adc.w	fp, r3, r5
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	008b      	lsls	r3, r1, #2
 8004870:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004874:	0082      	lsls	r2, r0, #2
 8004876:	4650      	mov	r0, sl
 8004878:	4659      	mov	r1, fp
 800487a:	f7fb fed5 	bl	8000628 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4bb3      	ldr	r3, [pc, #716]	; (8004b50 <UART_SetConfig+0x734>)
 8004884:	fba3 2302 	umull	r2, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	011e      	lsls	r6, r3, #4
 800488c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004890:	4618      	mov	r0, r3
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	1894      	adds	r4, r2, r2
 800489c:	623c      	str	r4, [r7, #32]
 800489e:	415b      	adcs	r3, r3
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
 80048a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048a6:	1812      	adds	r2, r2, r0
 80048a8:	eb41 0303 	adc.w	r3, r1, r3
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	f04f 0500 	mov.w	r5, #0
 80048b4:	00dd      	lsls	r5, r3, #3
 80048b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048ba:	00d4      	lsls	r4, r2, #3
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	1814      	adds	r4, r2, r0
 80048c2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80048c6:	414b      	adcs	r3, r1
 80048c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048e6:	0082      	lsls	r2, r0, #2
 80048e8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80048ec:	f7fb fe9c 	bl	8000628 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4b96      	ldr	r3, [pc, #600]	; (8004b50 <UART_SetConfig+0x734>)
 80048f6:	fba3 1302 	umull	r1, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2164      	movs	r1, #100	; 0x64
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a91      	ldr	r2, [pc, #580]	; (8004b50 <UART_SetConfig+0x734>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004914:	441e      	add	r6, r3
 8004916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800491a:	4618      	mov	r0, r3
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	1894      	adds	r4, r2, r2
 8004926:	61bc      	str	r4, [r7, #24]
 8004928:	415b      	adcs	r3, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004930:	1812      	adds	r2, r2, r0
 8004932:	eb41 0303 	adc.w	r3, r1, r3
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	f04f 0500 	mov.w	r5, #0
 800493e:	00dd      	lsls	r5, r3, #3
 8004940:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004944:	00d4      	lsls	r4, r2, #3
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	1814      	adds	r4, r2, r0
 800494c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004950:	414b      	adcs	r3, r1
 8004952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4618      	mov	r0, r3
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	008b      	lsls	r3, r1, #2
 800496c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004970:	0082      	lsls	r2, r0, #2
 8004972:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004976:	f7fb fe57 	bl	8000628 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4b74      	ldr	r3, [pc, #464]	; (8004b50 <UART_SetConfig+0x734>)
 8004980:	fba3 1302 	umull	r1, r3, r3, r2
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	2164      	movs	r1, #100	; 0x64
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	3332      	adds	r3, #50	; 0x32
 8004992:	4a6f      	ldr	r2, [pc, #444]	; (8004b50 <UART_SetConfig+0x734>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	f003 020f 	and.w	r2, r3, #15
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4432      	add	r2, r6
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	e0c9      	b.n	8004b3e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80049aa:	f7fe fbb1 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 80049ae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049b6:	461c      	mov	r4, r3
 80049b8:	f04f 0500 	mov.w	r5, #0
 80049bc:	4622      	mov	r2, r4
 80049be:	462b      	mov	r3, r5
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	6139      	str	r1, [r7, #16]
 80049c4:	415b      	adcs	r3, r3
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049cc:	1912      	adds	r2, r2, r4
 80049ce:	eb45 0303 	adc.w	r3, r5, r3
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f04f 0100 	mov.w	r1, #0
 80049da:	00d9      	lsls	r1, r3, #3
 80049dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e0:	00d0      	lsls	r0, r2, #3
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	eb12 0804 	adds.w	r8, r2, r4
 80049ea:	eb43 0905 	adc.w	r9, r3, r5
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	008b      	lsls	r3, r1, #2
 8004a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a08:	0082      	lsls	r2, r0, #2
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	f7fb fe0b 	bl	8000628 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4b4e      	ldr	r3, [pc, #312]	; (8004b50 <UART_SetConfig+0x734>)
 8004a18:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	011e      	lsls	r6, r3, #4
 8004a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	1894      	adds	r4, r2, r2
 8004a30:	60bc      	str	r4, [r7, #8]
 8004a32:	415b      	adcs	r3, r3
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a3a:	1812      	adds	r2, r2, r0
 8004a3c:	eb41 0303 	adc.w	r3, r1, r3
 8004a40:	f04f 0400 	mov.w	r4, #0
 8004a44:	f04f 0500 	mov.w	r5, #0
 8004a48:	00dd      	lsls	r5, r3, #3
 8004a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a4e:	00d4      	lsls	r4, r2, #3
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	1814      	adds	r4, r2, r0
 8004a56:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004a5a:	414b      	adcs	r3, r1
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	008b      	lsls	r3, r1, #2
 8004a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a7a:	0082      	lsls	r2, r0, #2
 8004a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a80:	f7fb fdd2 	bl	8000628 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <UART_SetConfig+0x734>)
 8004a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2164      	movs	r1, #100	; 0x64
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	3332      	adds	r3, #50	; 0x32
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <UART_SetConfig+0x734>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa8:	441e      	add	r6, r3
 8004aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	1894      	adds	r4, r2, r2
 8004aba:	603c      	str	r4, [r7, #0]
 8004abc:	415b      	adcs	r3, r3
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac4:	1812      	adds	r2, r2, r0
 8004ac6:	eb41 0303 	adc.w	r3, r1, r3
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	f04f 0500 	mov.w	r5, #0
 8004ad2:	00dd      	lsls	r5, r3, #3
 8004ad4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ad8:	00d4      	lsls	r4, r2, #3
 8004ada:	4622      	mov	r2, r4
 8004adc:	462b      	mov	r3, r5
 8004ade:	1814      	adds	r4, r2, r0
 8004ae0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f04f 0100 	mov.w	r1, #0
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	008b      	lsls	r3, r1, #2
 8004b00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b04:	0082      	lsls	r2, r0, #2
 8004b06:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004b0a:	f7fb fd8d 	bl	8000628 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <UART_SetConfig+0x734>)
 8004b14:	fba3 1302 	umull	r1, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	2164      	movs	r1, #100	; 0x64
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	3332      	adds	r3, #50	; 0x32
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <UART_SetConfig+0x734>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f003 020f 	and.w	r2, r3, #15
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4432      	add	r2, r6
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	e7ff      	b.n	8004b3e <UART_SetConfig+0x722>
 8004b3e:	bf00      	nop
 8004b40:	37f4      	adds	r7, #244	; 0xf4
 8004b42:	46bd      	mov	sp, r7
 8004b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b48:	40011000 	.word	0x40011000
 8004b4c:	40011400 	.word	0x40011400
 8004b50:	51eb851f 	.word	0x51eb851f

08004b54 <__errno>:
 8004b54:	4b01      	ldr	r3, [pc, #4]	; (8004b5c <__errno+0x8>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	2000000c 	.word	0x2000000c

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4d0d      	ldr	r5, [pc, #52]	; (8004b98 <__libc_init_array+0x38>)
 8004b64:	4c0d      	ldr	r4, [pc, #52]	; (8004b9c <__libc_init_array+0x3c>)
 8004b66:	1b64      	subs	r4, r4, r5
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	4d0b      	ldr	r5, [pc, #44]	; (8004ba0 <__libc_init_array+0x40>)
 8004b72:	4c0c      	ldr	r4, [pc, #48]	; (8004ba4 <__libc_init_array+0x44>)
 8004b74:	f001 f83e 	bl	8005bf4 <_init>
 8004b78:	1b64      	subs	r4, r4, r5
 8004b7a:	10a4      	asrs	r4, r4, #2
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	08005cd0 	.word	0x08005cd0
 8004b9c:	08005cd0 	.word	0x08005cd0
 8004ba0:	08005cd0 	.word	0x08005cd0
 8004ba4:	08005cd4 	.word	0x08005cd4

08004ba8 <memset>:
 8004ba8:	4402      	add	r2, r0
 8004baa:	4603      	mov	r3, r0
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d100      	bne.n	8004bb2 <memset+0xa>
 8004bb0:	4770      	bx	lr
 8004bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb6:	e7f9      	b.n	8004bac <memset+0x4>

08004bb8 <iprintf>:
 8004bb8:	b40f      	push	{r0, r1, r2, r3}
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <iprintf+0x2c>)
 8004bbc:	b513      	push	{r0, r1, r4, lr}
 8004bbe:	681c      	ldr	r4, [r3, #0]
 8004bc0:	b124      	cbz	r4, 8004bcc <iprintf+0x14>
 8004bc2:	69a3      	ldr	r3, [r4, #24]
 8004bc4:	b913      	cbnz	r3, 8004bcc <iprintf+0x14>
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fa5e 	bl	8005088 <__sinit>
 8004bcc:	ab05      	add	r3, sp, #20
 8004bce:	9a04      	ldr	r2, [sp, #16]
 8004bd0:	68a1      	ldr	r1, [r4, #8]
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 fc2f 	bl	8005438 <_vfiprintf_r>
 8004bda:	b002      	add	sp, #8
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	b004      	add	sp, #16
 8004be2:	4770      	bx	lr
 8004be4:	2000000c 	.word	0x2000000c

08004be8 <_puts_r>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	460e      	mov	r6, r1
 8004bec:	4605      	mov	r5, r0
 8004bee:	b118      	cbz	r0, 8004bf8 <_puts_r+0x10>
 8004bf0:	6983      	ldr	r3, [r0, #24]
 8004bf2:	b90b      	cbnz	r3, 8004bf8 <_puts_r+0x10>
 8004bf4:	f000 fa48 	bl	8005088 <__sinit>
 8004bf8:	69ab      	ldr	r3, [r5, #24]
 8004bfa:	68ac      	ldr	r4, [r5, #8]
 8004bfc:	b913      	cbnz	r3, 8004c04 <_puts_r+0x1c>
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 fa42 	bl	8005088 <__sinit>
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <_puts_r+0xd0>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d120      	bne.n	8004c4c <_puts_r+0x64>
 8004c0a:	686c      	ldr	r4, [r5, #4]
 8004c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c0e:	07db      	lsls	r3, r3, #31
 8004c10:	d405      	bmi.n	8004c1e <_puts_r+0x36>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	0598      	lsls	r0, r3, #22
 8004c16:	d402      	bmi.n	8004c1e <_puts_r+0x36>
 8004c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c1a:	f000 fad3 	bl	80051c4 <__retarget_lock_acquire_recursive>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	0719      	lsls	r1, r3, #28
 8004c22:	d51d      	bpl.n	8004c60 <_puts_r+0x78>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	b1db      	cbz	r3, 8004c60 <_puts_r+0x78>
 8004c28:	3e01      	subs	r6, #1
 8004c2a:	68a3      	ldr	r3, [r4, #8]
 8004c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c30:	3b01      	subs	r3, #1
 8004c32:	60a3      	str	r3, [r4, #8]
 8004c34:	bb39      	cbnz	r1, 8004c86 <_puts_r+0x9e>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	da38      	bge.n	8004cac <_puts_r+0xc4>
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	210a      	movs	r1, #10
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 f848 	bl	8004cd4 <__swbuf_r>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d011      	beq.n	8004c6c <_puts_r+0x84>
 8004c48:	250a      	movs	r5, #10
 8004c4a:	e011      	b.n	8004c70 <_puts_r+0x88>
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <_puts_r+0xd4>)
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	d101      	bne.n	8004c56 <_puts_r+0x6e>
 8004c52:	68ac      	ldr	r4, [r5, #8]
 8004c54:	e7da      	b.n	8004c0c <_puts_r+0x24>
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <_puts_r+0xd8>)
 8004c58:	429c      	cmp	r4, r3
 8004c5a:	bf08      	it	eq
 8004c5c:	68ec      	ldreq	r4, [r5, #12]
 8004c5e:	e7d5      	b.n	8004c0c <_puts_r+0x24>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 f888 	bl	8004d78 <__swsetup_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d0dd      	beq.n	8004c28 <_puts_r+0x40>
 8004c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c72:	07da      	lsls	r2, r3, #31
 8004c74:	d405      	bmi.n	8004c82 <_puts_r+0x9a>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	059b      	lsls	r3, r3, #22
 8004c7a:	d402      	bmi.n	8004c82 <_puts_r+0x9a>
 8004c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7e:	f000 faa2 	bl	80051c6 <__retarget_lock_release_recursive>
 8004c82:	4628      	mov	r0, r5
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da04      	bge.n	8004c94 <_puts_r+0xac>
 8004c8a:	69a2      	ldr	r2, [r4, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	dc06      	bgt.n	8004c9e <_puts_r+0xb6>
 8004c90:	290a      	cmp	r1, #10
 8004c92:	d004      	beq.n	8004c9e <_puts_r+0xb6>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	7019      	strb	r1, [r3, #0]
 8004c9c:	e7c5      	b.n	8004c2a <_puts_r+0x42>
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 f817 	bl	8004cd4 <__swbuf_r>
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d1bf      	bne.n	8004c2a <_puts_r+0x42>
 8004caa:	e7df      	b.n	8004c6c <_puts_r+0x84>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	250a      	movs	r5, #10
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	6022      	str	r2, [r4, #0]
 8004cb4:	701d      	strb	r5, [r3, #0]
 8004cb6:	e7db      	b.n	8004c70 <_puts_r+0x88>
 8004cb8:	08005c54 	.word	0x08005c54
 8004cbc:	08005c74 	.word	0x08005c74
 8004cc0:	08005c34 	.word	0x08005c34

08004cc4 <puts>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	; (8004cd0 <puts+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f7ff bf8d 	b.w	8004be8 <_puts_r>
 8004cce:	bf00      	nop
 8004cd0:	2000000c 	.word	0x2000000c

08004cd4 <__swbuf_r>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	4605      	mov	r5, r0
 8004cdc:	b118      	cbz	r0, 8004ce6 <__swbuf_r+0x12>
 8004cde:	6983      	ldr	r3, [r0, #24]
 8004ce0:	b90b      	cbnz	r3, 8004ce6 <__swbuf_r+0x12>
 8004ce2:	f000 f9d1 	bl	8005088 <__sinit>
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <__swbuf_r+0x98>)
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	d12b      	bne.n	8004d44 <__swbuf_r+0x70>
 8004cec:	686c      	ldr	r4, [r5, #4]
 8004cee:	69a3      	ldr	r3, [r4, #24]
 8004cf0:	60a3      	str	r3, [r4, #8]
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	071a      	lsls	r2, r3, #28
 8004cf6:	d52f      	bpl.n	8004d58 <__swbuf_r+0x84>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	b36b      	cbz	r3, 8004d58 <__swbuf_r+0x84>
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	1ac0      	subs	r0, r0, r3
 8004d02:	6963      	ldr	r3, [r4, #20]
 8004d04:	b2f6      	uxtb	r6, r6
 8004d06:	4283      	cmp	r3, r0
 8004d08:	4637      	mov	r7, r6
 8004d0a:	dc04      	bgt.n	8004d16 <__swbuf_r+0x42>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f926 	bl	8004f60 <_fflush_r>
 8004d14:	bb30      	cbnz	r0, 8004d64 <__swbuf_r+0x90>
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	6022      	str	r2, [r4, #0]
 8004d22:	701e      	strb	r6, [r3, #0]
 8004d24:	6963      	ldr	r3, [r4, #20]
 8004d26:	3001      	adds	r0, #1
 8004d28:	4283      	cmp	r3, r0
 8004d2a:	d004      	beq.n	8004d36 <__swbuf_r+0x62>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d506      	bpl.n	8004d40 <__swbuf_r+0x6c>
 8004d32:	2e0a      	cmp	r6, #10
 8004d34:	d104      	bne.n	8004d40 <__swbuf_r+0x6c>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f911 	bl	8004f60 <_fflush_r>
 8004d3e:	b988      	cbnz	r0, 8004d64 <__swbuf_r+0x90>
 8004d40:	4638      	mov	r0, r7
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <__swbuf_r+0x9c>)
 8004d46:	429c      	cmp	r4, r3
 8004d48:	d101      	bne.n	8004d4e <__swbuf_r+0x7a>
 8004d4a:	68ac      	ldr	r4, [r5, #8]
 8004d4c:	e7cf      	b.n	8004cee <__swbuf_r+0x1a>
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <__swbuf_r+0xa0>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	bf08      	it	eq
 8004d54:	68ec      	ldreq	r4, [r5, #12]
 8004d56:	e7ca      	b.n	8004cee <__swbuf_r+0x1a>
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f80c 	bl	8004d78 <__swsetup_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d0cb      	beq.n	8004cfc <__swbuf_r+0x28>
 8004d64:	f04f 37ff 	mov.w	r7, #4294967295
 8004d68:	e7ea      	b.n	8004d40 <__swbuf_r+0x6c>
 8004d6a:	bf00      	nop
 8004d6c:	08005c54 	.word	0x08005c54
 8004d70:	08005c74 	.word	0x08005c74
 8004d74:	08005c34 	.word	0x08005c34

08004d78 <__swsetup_r>:
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <__swsetup_r+0xcc>)
 8004d7a:	b570      	push	{r4, r5, r6, lr}
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	4606      	mov	r6, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	b125      	cbz	r5, 8004d8e <__swsetup_r+0x16>
 8004d84:	69ab      	ldr	r3, [r5, #24]
 8004d86:	b913      	cbnz	r3, 8004d8e <__swsetup_r+0x16>
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f97d 	bl	8005088 <__sinit>
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <__swsetup_r+0xd0>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	d10f      	bne.n	8004db4 <__swsetup_r+0x3c>
 8004d94:	686c      	ldr	r4, [r5, #4]
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d9c:	0719      	lsls	r1, r3, #28
 8004d9e:	d42c      	bmi.n	8004dfa <__swsetup_r+0x82>
 8004da0:	06dd      	lsls	r5, r3, #27
 8004da2:	d411      	bmi.n	8004dc8 <__swsetup_r+0x50>
 8004da4:	2309      	movs	r3, #9
 8004da6:	6033      	str	r3, [r6, #0]
 8004da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	e03e      	b.n	8004e32 <__swsetup_r+0xba>
 8004db4:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <__swsetup_r+0xd4>)
 8004db6:	429c      	cmp	r4, r3
 8004db8:	d101      	bne.n	8004dbe <__swsetup_r+0x46>
 8004dba:	68ac      	ldr	r4, [r5, #8]
 8004dbc:	e7eb      	b.n	8004d96 <__swsetup_r+0x1e>
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <__swsetup_r+0xd8>)
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	bf08      	it	eq
 8004dc4:	68ec      	ldreq	r4, [r5, #12]
 8004dc6:	e7e6      	b.n	8004d96 <__swsetup_r+0x1e>
 8004dc8:	0758      	lsls	r0, r3, #29
 8004dca:	d512      	bpl.n	8004df2 <__swsetup_r+0x7a>
 8004dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dce:	b141      	cbz	r1, 8004de2 <__swsetup_r+0x6a>
 8004dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d002      	beq.n	8004dde <__swsetup_r+0x66>
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 fa59 	bl	8005290 <_free_r>
 8004dde:	2300      	movs	r3, #0
 8004de0:	6363      	str	r3, [r4, #52]	; 0x34
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	2300      	movs	r3, #0
 8004dec:	6063      	str	r3, [r4, #4]
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	b94b      	cbnz	r3, 8004e12 <__swsetup_r+0x9a>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e08:	d003      	beq.n	8004e12 <__swsetup_r+0x9a>
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f000 f9ff 	bl	8005210 <__smakebuf_r>
 8004e12:	89a0      	ldrh	r0, [r4, #12]
 8004e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e18:	f010 0301 	ands.w	r3, r0, #1
 8004e1c:	d00a      	beq.n	8004e34 <__swsetup_r+0xbc>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60a3      	str	r3, [r4, #8]
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	425b      	negs	r3, r3
 8004e26:	61a3      	str	r3, [r4, #24]
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	b943      	cbnz	r3, 8004e3e <__swsetup_r+0xc6>
 8004e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e30:	d1ba      	bne.n	8004da8 <__swsetup_r+0x30>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	0781      	lsls	r1, r0, #30
 8004e36:	bf58      	it	pl
 8004e38:	6963      	ldrpl	r3, [r4, #20]
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	e7f4      	b.n	8004e28 <__swsetup_r+0xb0>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	e7f7      	b.n	8004e32 <__swsetup_r+0xba>
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	08005c54 	.word	0x08005c54
 8004e4c:	08005c74 	.word	0x08005c74
 8004e50:	08005c34 	.word	0x08005c34

08004e54 <__sflush_r>:
 8004e54:	898a      	ldrh	r2, [r1, #12]
 8004e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	0710      	lsls	r0, r2, #28
 8004e5e:	460c      	mov	r4, r1
 8004e60:	d458      	bmi.n	8004f14 <__sflush_r+0xc0>
 8004e62:	684b      	ldr	r3, [r1, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc05      	bgt.n	8004e74 <__sflush_r+0x20>
 8004e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dc02      	bgt.n	8004e74 <__sflush_r+0x20>
 8004e6e:	2000      	movs	r0, #0
 8004e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	d0f9      	beq.n	8004e6e <__sflush_r+0x1a>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e80:	682f      	ldr	r7, [r5, #0]
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	d032      	beq.n	8004eec <__sflush_r+0x98>
 8004e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	075a      	lsls	r2, r3, #29
 8004e8c:	d505      	bpl.n	8004e9a <__sflush_r+0x46>
 8004e8e:	6863      	ldr	r3, [r4, #4]
 8004e90:	1ac0      	subs	r0, r0, r3
 8004e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e94:	b10b      	cbz	r3, 8004e9a <__sflush_r+0x46>
 8004e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e98:	1ac0      	subs	r0, r0, r3
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ea0:	6a21      	ldr	r1, [r4, #32]
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b0      	blx	r6
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	d106      	bne.n	8004eba <__sflush_r+0x66>
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	291d      	cmp	r1, #29
 8004eb0:	d82c      	bhi.n	8004f0c <__sflush_r+0xb8>
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <__sflush_r+0x108>)
 8004eb4:	40ca      	lsrs	r2, r1
 8004eb6:	07d6      	lsls	r6, r2, #31
 8004eb8:	d528      	bpl.n	8004f0c <__sflush_r+0xb8>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	6062      	str	r2, [r4, #4]
 8004ebe:	04d9      	lsls	r1, r3, #19
 8004ec0:	6922      	ldr	r2, [r4, #16]
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	d504      	bpl.n	8004ed0 <__sflush_r+0x7c>
 8004ec6:	1c42      	adds	r2, r0, #1
 8004ec8:	d101      	bne.n	8004ece <__sflush_r+0x7a>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	b903      	cbnz	r3, 8004ed0 <__sflush_r+0x7c>
 8004ece:	6560      	str	r0, [r4, #84]	; 0x54
 8004ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed2:	602f      	str	r7, [r5, #0]
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d0ca      	beq.n	8004e6e <__sflush_r+0x1a>
 8004ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <__sflush_r+0x92>
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 f9d5 	bl	8005290 <_free_r>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8004eea:	e7c1      	b.n	8004e70 <__sflush_r+0x1c>
 8004eec:	6a21      	ldr	r1, [r4, #32]
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b0      	blx	r6
 8004ef4:	1c41      	adds	r1, r0, #1
 8004ef6:	d1c7      	bne.n	8004e88 <__sflush_r+0x34>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0c4      	beq.n	8004e88 <__sflush_r+0x34>
 8004efe:	2b1d      	cmp	r3, #29
 8004f00:	d001      	beq.n	8004f06 <__sflush_r+0xb2>
 8004f02:	2b16      	cmp	r3, #22
 8004f04:	d101      	bne.n	8004f0a <__sflush_r+0xb6>
 8004f06:	602f      	str	r7, [r5, #0]
 8004f08:	e7b1      	b.n	8004e6e <__sflush_r+0x1a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	e7ad      	b.n	8004e70 <__sflush_r+0x1c>
 8004f14:	690f      	ldr	r7, [r1, #16]
 8004f16:	2f00      	cmp	r7, #0
 8004f18:	d0a9      	beq.n	8004e6e <__sflush_r+0x1a>
 8004f1a:	0793      	lsls	r3, r2, #30
 8004f1c:	680e      	ldr	r6, [r1, #0]
 8004f1e:	bf08      	it	eq
 8004f20:	694b      	ldreq	r3, [r1, #20]
 8004f22:	600f      	str	r7, [r1, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2300      	movne	r3, #0
 8004f28:	eba6 0807 	sub.w	r8, r6, r7
 8004f2c:	608b      	str	r3, [r1, #8]
 8004f2e:	f1b8 0f00 	cmp.w	r8, #0
 8004f32:	dd9c      	ble.n	8004e6e <__sflush_r+0x1a>
 8004f34:	6a21      	ldr	r1, [r4, #32]
 8004f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f38:	4643      	mov	r3, r8
 8004f3a:	463a      	mov	r2, r7
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b0      	blx	r6
 8004f40:	2800      	cmp	r0, #0
 8004f42:	dc06      	bgt.n	8004f52 <__sflush_r+0xfe>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	e78e      	b.n	8004e70 <__sflush_r+0x1c>
 8004f52:	4407      	add	r7, r0
 8004f54:	eba8 0800 	sub.w	r8, r8, r0
 8004f58:	e7e9      	b.n	8004f2e <__sflush_r+0xda>
 8004f5a:	bf00      	nop
 8004f5c:	20400001 	.word	0x20400001

08004f60 <_fflush_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	690b      	ldr	r3, [r1, #16]
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	b913      	cbnz	r3, 8004f70 <_fflush_r+0x10>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	b118      	cbz	r0, 8004f7a <_fflush_r+0x1a>
 8004f72:	6983      	ldr	r3, [r0, #24]
 8004f74:	b90b      	cbnz	r3, 8004f7a <_fflush_r+0x1a>
 8004f76:	f000 f887 	bl	8005088 <__sinit>
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <_fflush_r+0x6c>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d11b      	bne.n	8004fb8 <_fflush_r+0x58>
 8004f80:	686c      	ldr	r4, [r5, #4]
 8004f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <_fflush_r+0xa>
 8004f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f8c:	07d0      	lsls	r0, r2, #31
 8004f8e:	d404      	bmi.n	8004f9a <_fflush_r+0x3a>
 8004f90:	0599      	lsls	r1, r3, #22
 8004f92:	d402      	bmi.n	8004f9a <_fflush_r+0x3a>
 8004f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f96:	f000 f915 	bl	80051c4 <__retarget_lock_acquire_recursive>
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	f7ff ff59 	bl	8004e54 <__sflush_r>
 8004fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa4:	07da      	lsls	r2, r3, #31
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	d4e0      	bmi.n	8004f6c <_fflush_r+0xc>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	059b      	lsls	r3, r3, #22
 8004fae:	d4dd      	bmi.n	8004f6c <_fflush_r+0xc>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb2:	f000 f908 	bl	80051c6 <__retarget_lock_release_recursive>
 8004fb6:	e7d9      	b.n	8004f6c <_fflush_r+0xc>
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <_fflush_r+0x70>)
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	d101      	bne.n	8004fc2 <_fflush_r+0x62>
 8004fbe:	68ac      	ldr	r4, [r5, #8]
 8004fc0:	e7df      	b.n	8004f82 <_fflush_r+0x22>
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <_fflush_r+0x74>)
 8004fc4:	429c      	cmp	r4, r3
 8004fc6:	bf08      	it	eq
 8004fc8:	68ec      	ldreq	r4, [r5, #12]
 8004fca:	e7da      	b.n	8004f82 <_fflush_r+0x22>
 8004fcc:	08005c54 	.word	0x08005c54
 8004fd0:	08005c74 	.word	0x08005c74
 8004fd4:	08005c34 	.word	0x08005c34

08004fd8 <std>:
 8004fd8:	2300      	movs	r3, #0
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fe6:	6083      	str	r3, [r0, #8]
 8004fe8:	8181      	strh	r1, [r0, #12]
 8004fea:	6643      	str	r3, [r0, #100]	; 0x64
 8004fec:	81c2      	strh	r2, [r0, #14]
 8004fee:	6183      	str	r3, [r0, #24]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	305c      	adds	r0, #92	; 0x5c
 8004ff6:	f7ff fdd7 	bl	8004ba8 <memset>
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <std+0x38>)
 8004ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x3c>)
 8005000:	62a3      	str	r3, [r4, #40]	; 0x28
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x40>)
 8005004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <std+0x44>)
 8005008:	6224      	str	r4, [r4, #32]
 800500a:	6323      	str	r3, [r4, #48]	; 0x30
 800500c:	bd10      	pop	{r4, pc}
 800500e:	bf00      	nop
 8005010:	080059e1 	.word	0x080059e1
 8005014:	08005a03 	.word	0x08005a03
 8005018:	08005a3b 	.word	0x08005a3b
 800501c:	08005a5f 	.word	0x08005a5f

08005020 <_cleanup_r>:
 8005020:	4901      	ldr	r1, [pc, #4]	; (8005028 <_cleanup_r+0x8>)
 8005022:	f000 b8af 	b.w	8005184 <_fwalk_reent>
 8005026:	bf00      	nop
 8005028:	08004f61 	.word	0x08004f61

0800502c <__sfmoreglue>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	1e4a      	subs	r2, r1, #1
 8005030:	2568      	movs	r5, #104	; 0x68
 8005032:	4355      	muls	r5, r2
 8005034:	460e      	mov	r6, r1
 8005036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800503a:	f000 f979 	bl	8005330 <_malloc_r>
 800503e:	4604      	mov	r4, r0
 8005040:	b140      	cbz	r0, 8005054 <__sfmoreglue+0x28>
 8005042:	2100      	movs	r1, #0
 8005044:	e9c0 1600 	strd	r1, r6, [r0]
 8005048:	300c      	adds	r0, #12
 800504a:	60a0      	str	r0, [r4, #8]
 800504c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005050:	f7ff fdaa 	bl	8004ba8 <memset>
 8005054:	4620      	mov	r0, r4
 8005056:	bd70      	pop	{r4, r5, r6, pc}

08005058 <__sfp_lock_acquire>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__sfp_lock_acquire+0x8>)
 800505a:	f000 b8b3 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	200002f8 	.word	0x200002f8

08005064 <__sfp_lock_release>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__sfp_lock_release+0x8>)
 8005066:	f000 b8ae 	b.w	80051c6 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	200002f8 	.word	0x200002f8

08005070 <__sinit_lock_acquire>:
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <__sinit_lock_acquire+0x8>)
 8005072:	f000 b8a7 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 8005076:	bf00      	nop
 8005078:	200002f3 	.word	0x200002f3

0800507c <__sinit_lock_release>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sinit_lock_release+0x8>)
 800507e:	f000 b8a2 	b.w	80051c6 <__retarget_lock_release_recursive>
 8005082:	bf00      	nop
 8005084:	200002f3 	.word	0x200002f3

08005088 <__sinit>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	f7ff fff0 	bl	8005070 <__sinit_lock_acquire>
 8005090:	69a3      	ldr	r3, [r4, #24]
 8005092:	b11b      	cbz	r3, 800509c <__sinit+0x14>
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	f7ff bff0 	b.w	800507c <__sinit_lock_release>
 800509c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a0:	6523      	str	r3, [r4, #80]	; 0x50
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <__sinit+0x68>)
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <__sinit+0x6c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	bf04      	itt	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	61a3      	streq	r3, [r4, #24]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f820 	bl	80050f8 <__sfp>
 80050b8:	6060      	str	r0, [r4, #4]
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 f81c 	bl	80050f8 <__sfp>
 80050c0:	60a0      	str	r0, [r4, #8]
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f818 	bl	80050f8 <__sfp>
 80050c8:	2200      	movs	r2, #0
 80050ca:	60e0      	str	r0, [r4, #12]
 80050cc:	2104      	movs	r1, #4
 80050ce:	6860      	ldr	r0, [r4, #4]
 80050d0:	f7ff ff82 	bl	8004fd8 <std>
 80050d4:	68a0      	ldr	r0, [r4, #8]
 80050d6:	2201      	movs	r2, #1
 80050d8:	2109      	movs	r1, #9
 80050da:	f7ff ff7d 	bl	8004fd8 <std>
 80050de:	68e0      	ldr	r0, [r4, #12]
 80050e0:	2202      	movs	r2, #2
 80050e2:	2112      	movs	r1, #18
 80050e4:	f7ff ff78 	bl	8004fd8 <std>
 80050e8:	2301      	movs	r3, #1
 80050ea:	61a3      	str	r3, [r4, #24]
 80050ec:	e7d2      	b.n	8005094 <__sinit+0xc>
 80050ee:	bf00      	nop
 80050f0:	08005c30 	.word	0x08005c30
 80050f4:	08005021 	.word	0x08005021

080050f8 <__sfp>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	4607      	mov	r7, r0
 80050fc:	f7ff ffac 	bl	8005058 <__sfp_lock_acquire>
 8005100:	4b1e      	ldr	r3, [pc, #120]	; (800517c <__sfp+0x84>)
 8005102:	681e      	ldr	r6, [r3, #0]
 8005104:	69b3      	ldr	r3, [r6, #24]
 8005106:	b913      	cbnz	r3, 800510e <__sfp+0x16>
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff ffbd 	bl	8005088 <__sinit>
 800510e:	3648      	adds	r6, #72	; 0x48
 8005110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005114:	3b01      	subs	r3, #1
 8005116:	d503      	bpl.n	8005120 <__sfp+0x28>
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	b30b      	cbz	r3, 8005160 <__sfp+0x68>
 800511c:	6836      	ldr	r6, [r6, #0]
 800511e:	e7f7      	b.n	8005110 <__sfp+0x18>
 8005120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005124:	b9d5      	cbnz	r5, 800515c <__sfp+0x64>
 8005126:	4b16      	ldr	r3, [pc, #88]	; (8005180 <__sfp+0x88>)
 8005128:	60e3      	str	r3, [r4, #12]
 800512a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800512e:	6665      	str	r5, [r4, #100]	; 0x64
 8005130:	f000 f847 	bl	80051c2 <__retarget_lock_init_recursive>
 8005134:	f7ff ff96 	bl	8005064 <__sfp_lock_release>
 8005138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800513c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005140:	6025      	str	r5, [r4, #0]
 8005142:	61a5      	str	r5, [r4, #24]
 8005144:	2208      	movs	r2, #8
 8005146:	4629      	mov	r1, r5
 8005148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800514c:	f7ff fd2c 	bl	8004ba8 <memset>
 8005150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005158:	4620      	mov	r0, r4
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515c:	3468      	adds	r4, #104	; 0x68
 800515e:	e7d9      	b.n	8005114 <__sfp+0x1c>
 8005160:	2104      	movs	r1, #4
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ff62 	bl	800502c <__sfmoreglue>
 8005168:	4604      	mov	r4, r0
 800516a:	6030      	str	r0, [r6, #0]
 800516c:	2800      	cmp	r0, #0
 800516e:	d1d5      	bne.n	800511c <__sfp+0x24>
 8005170:	f7ff ff78 	bl	8005064 <__sfp_lock_release>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	e7ee      	b.n	8005158 <__sfp+0x60>
 800517a:	bf00      	nop
 800517c:	08005c30 	.word	0x08005c30
 8005180:	ffff0001 	.word	0xffff0001

08005184 <_fwalk_reent>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	4606      	mov	r6, r0
 800518a:	4688      	mov	r8, r1
 800518c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005190:	2700      	movs	r7, #0
 8005192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005196:	f1b9 0901 	subs.w	r9, r9, #1
 800519a:	d505      	bpl.n	80051a8 <_fwalk_reent+0x24>
 800519c:	6824      	ldr	r4, [r4, #0]
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d1f7      	bne.n	8005192 <_fwalk_reent+0xe>
 80051a2:	4638      	mov	r0, r7
 80051a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a8:	89ab      	ldrh	r3, [r5, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d907      	bls.n	80051be <_fwalk_reent+0x3a>
 80051ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b2:	3301      	adds	r3, #1
 80051b4:	d003      	beq.n	80051be <_fwalk_reent+0x3a>
 80051b6:	4629      	mov	r1, r5
 80051b8:	4630      	mov	r0, r6
 80051ba:	47c0      	blx	r8
 80051bc:	4307      	orrs	r7, r0
 80051be:	3568      	adds	r5, #104	; 0x68
 80051c0:	e7e9      	b.n	8005196 <_fwalk_reent+0x12>

080051c2 <__retarget_lock_init_recursive>:
 80051c2:	4770      	bx	lr

080051c4 <__retarget_lock_acquire_recursive>:
 80051c4:	4770      	bx	lr

080051c6 <__retarget_lock_release_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <__swhatbuf_r>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	460e      	mov	r6, r1
 80051cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d0:	2900      	cmp	r1, #0
 80051d2:	b096      	sub	sp, #88	; 0x58
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	da07      	bge.n	80051ea <__swhatbuf_r+0x22>
 80051da:	2300      	movs	r3, #0
 80051dc:	602b      	str	r3, [r5, #0]
 80051de:	89b3      	ldrh	r3, [r6, #12]
 80051e0:	061a      	lsls	r2, r3, #24
 80051e2:	d410      	bmi.n	8005206 <__swhatbuf_r+0x3e>
 80051e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051e8:	e00e      	b.n	8005208 <__swhatbuf_r+0x40>
 80051ea:	466a      	mov	r2, sp
 80051ec:	f000 fc5e 	bl	8005aac <_fstat_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	dbf2      	blt.n	80051da <__swhatbuf_r+0x12>
 80051f4:	9a01      	ldr	r2, [sp, #4]
 80051f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051fe:	425a      	negs	r2, r3
 8005200:	415a      	adcs	r2, r3
 8005202:	602a      	str	r2, [r5, #0]
 8005204:	e7ee      	b.n	80051e4 <__swhatbuf_r+0x1c>
 8005206:	2340      	movs	r3, #64	; 0x40
 8005208:	2000      	movs	r0, #0
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	b016      	add	sp, #88	; 0x58
 800520e:	bd70      	pop	{r4, r5, r6, pc}

08005210 <__smakebuf_r>:
 8005210:	898b      	ldrh	r3, [r1, #12]
 8005212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005214:	079d      	lsls	r5, r3, #30
 8005216:	4606      	mov	r6, r0
 8005218:	460c      	mov	r4, r1
 800521a:	d507      	bpl.n	800522c <__smakebuf_r+0x1c>
 800521c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	2301      	movs	r3, #1
 8005226:	6163      	str	r3, [r4, #20]
 8005228:	b002      	add	sp, #8
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	ab01      	add	r3, sp, #4
 800522e:	466a      	mov	r2, sp
 8005230:	f7ff ffca 	bl	80051c8 <__swhatbuf_r>
 8005234:	9900      	ldr	r1, [sp, #0]
 8005236:	4605      	mov	r5, r0
 8005238:	4630      	mov	r0, r6
 800523a:	f000 f879 	bl	8005330 <_malloc_r>
 800523e:	b948      	cbnz	r0, 8005254 <__smakebuf_r+0x44>
 8005240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005244:	059a      	lsls	r2, r3, #22
 8005246:	d4ef      	bmi.n	8005228 <__smakebuf_r+0x18>
 8005248:	f023 0303 	bic.w	r3, r3, #3
 800524c:	f043 0302 	orr.w	r3, r3, #2
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	e7e3      	b.n	800521c <__smakebuf_r+0xc>
 8005254:	4b0d      	ldr	r3, [pc, #52]	; (800528c <__smakebuf_r+0x7c>)
 8005256:	62b3      	str	r3, [r6, #40]	; 0x28
 8005258:	89a3      	ldrh	r3, [r4, #12]
 800525a:	6020      	str	r0, [r4, #0]
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	9b00      	ldr	r3, [sp, #0]
 8005264:	6163      	str	r3, [r4, #20]
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	6120      	str	r0, [r4, #16]
 800526a:	b15b      	cbz	r3, 8005284 <__smakebuf_r+0x74>
 800526c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005270:	4630      	mov	r0, r6
 8005272:	f000 fc2d 	bl	8005ad0 <_isatty_r>
 8005276:	b128      	cbz	r0, 8005284 <__smakebuf_r+0x74>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	81a3      	strh	r3, [r4, #12]
 8005284:	89a0      	ldrh	r0, [r4, #12]
 8005286:	4305      	orrs	r5, r0
 8005288:	81a5      	strh	r5, [r4, #12]
 800528a:	e7cd      	b.n	8005228 <__smakebuf_r+0x18>
 800528c:	08005021 	.word	0x08005021

08005290 <_free_r>:
 8005290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005292:	2900      	cmp	r1, #0
 8005294:	d048      	beq.n	8005328 <_free_r+0x98>
 8005296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529a:	9001      	str	r0, [sp, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f1a1 0404 	sub.w	r4, r1, #4
 80052a2:	bfb8      	it	lt
 80052a4:	18e4      	addlt	r4, r4, r3
 80052a6:	f000 fc35 	bl	8005b14 <__malloc_lock>
 80052aa:	4a20      	ldr	r2, [pc, #128]	; (800532c <_free_r+0x9c>)
 80052ac:	9801      	ldr	r0, [sp, #4]
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	4615      	mov	r5, r2
 80052b2:	b933      	cbnz	r3, 80052c2 <_free_r+0x32>
 80052b4:	6063      	str	r3, [r4, #4]
 80052b6:	6014      	str	r4, [r2, #0]
 80052b8:	b003      	add	sp, #12
 80052ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052be:	f000 bc2f 	b.w	8005b20 <__malloc_unlock>
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	d90b      	bls.n	80052de <_free_r+0x4e>
 80052c6:	6821      	ldr	r1, [r4, #0]
 80052c8:	1862      	adds	r2, r4, r1
 80052ca:	4293      	cmp	r3, r2
 80052cc:	bf04      	itt	eq
 80052ce:	681a      	ldreq	r2, [r3, #0]
 80052d0:	685b      	ldreq	r3, [r3, #4]
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	bf04      	itt	eq
 80052d6:	1852      	addeq	r2, r2, r1
 80052d8:	6022      	streq	r2, [r4, #0]
 80052da:	602c      	str	r4, [r5, #0]
 80052dc:	e7ec      	b.n	80052b8 <_free_r+0x28>
 80052de:	461a      	mov	r2, r3
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	b10b      	cbz	r3, 80052e8 <_free_r+0x58>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d9fa      	bls.n	80052de <_free_r+0x4e>
 80052e8:	6811      	ldr	r1, [r2, #0]
 80052ea:	1855      	adds	r5, r2, r1
 80052ec:	42a5      	cmp	r5, r4
 80052ee:	d10b      	bne.n	8005308 <_free_r+0x78>
 80052f0:	6824      	ldr	r4, [r4, #0]
 80052f2:	4421      	add	r1, r4
 80052f4:	1854      	adds	r4, r2, r1
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	d1dd      	bne.n	80052b8 <_free_r+0x28>
 80052fc:	681c      	ldr	r4, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	6053      	str	r3, [r2, #4]
 8005302:	4421      	add	r1, r4
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	e7d7      	b.n	80052b8 <_free_r+0x28>
 8005308:	d902      	bls.n	8005310 <_free_r+0x80>
 800530a:	230c      	movs	r3, #12
 800530c:	6003      	str	r3, [r0, #0]
 800530e:	e7d3      	b.n	80052b8 <_free_r+0x28>
 8005310:	6825      	ldr	r5, [r4, #0]
 8005312:	1961      	adds	r1, r4, r5
 8005314:	428b      	cmp	r3, r1
 8005316:	bf04      	itt	eq
 8005318:	6819      	ldreq	r1, [r3, #0]
 800531a:	685b      	ldreq	r3, [r3, #4]
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	bf04      	itt	eq
 8005320:	1949      	addeq	r1, r1, r5
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	6054      	str	r4, [r2, #4]
 8005326:	e7c7      	b.n	80052b8 <_free_r+0x28>
 8005328:	b003      	add	sp, #12
 800532a:	bd30      	pop	{r4, r5, pc}
 800532c:	20000090 	.word	0x20000090

08005330 <_malloc_r>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	1ccd      	adds	r5, r1, #3
 8005334:	f025 0503 	bic.w	r5, r5, #3
 8005338:	3508      	adds	r5, #8
 800533a:	2d0c      	cmp	r5, #12
 800533c:	bf38      	it	cc
 800533e:	250c      	movcc	r5, #12
 8005340:	2d00      	cmp	r5, #0
 8005342:	4606      	mov	r6, r0
 8005344:	db01      	blt.n	800534a <_malloc_r+0x1a>
 8005346:	42a9      	cmp	r1, r5
 8005348:	d903      	bls.n	8005352 <_malloc_r+0x22>
 800534a:	230c      	movs	r3, #12
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	2000      	movs	r0, #0
 8005350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005352:	f000 fbdf 	bl	8005b14 <__malloc_lock>
 8005356:	4921      	ldr	r1, [pc, #132]	; (80053dc <_malloc_r+0xac>)
 8005358:	680a      	ldr	r2, [r1, #0]
 800535a:	4614      	mov	r4, r2
 800535c:	b99c      	cbnz	r4, 8005386 <_malloc_r+0x56>
 800535e:	4f20      	ldr	r7, [pc, #128]	; (80053e0 <_malloc_r+0xb0>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	b923      	cbnz	r3, 800536e <_malloc_r+0x3e>
 8005364:	4621      	mov	r1, r4
 8005366:	4630      	mov	r0, r6
 8005368:	f000 fb2a 	bl	80059c0 <_sbrk_r>
 800536c:	6038      	str	r0, [r7, #0]
 800536e:	4629      	mov	r1, r5
 8005370:	4630      	mov	r0, r6
 8005372:	f000 fb25 	bl	80059c0 <_sbrk_r>
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	d123      	bne.n	80053c2 <_malloc_r+0x92>
 800537a:	230c      	movs	r3, #12
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	4630      	mov	r0, r6
 8005380:	f000 fbce 	bl	8005b20 <__malloc_unlock>
 8005384:	e7e3      	b.n	800534e <_malloc_r+0x1e>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	1b5b      	subs	r3, r3, r5
 800538a:	d417      	bmi.n	80053bc <_malloc_r+0x8c>
 800538c:	2b0b      	cmp	r3, #11
 800538e:	d903      	bls.n	8005398 <_malloc_r+0x68>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	441c      	add	r4, r3
 8005394:	6025      	str	r5, [r4, #0]
 8005396:	e004      	b.n	80053a2 <_malloc_r+0x72>
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	42a2      	cmp	r2, r4
 800539c:	bf0c      	ite	eq
 800539e:	600b      	streq	r3, [r1, #0]
 80053a0:	6053      	strne	r3, [r2, #4]
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 fbbc 	bl	8005b20 <__malloc_unlock>
 80053a8:	f104 000b 	add.w	r0, r4, #11
 80053ac:	1d23      	adds	r3, r4, #4
 80053ae:	f020 0007 	bic.w	r0, r0, #7
 80053b2:	1ac2      	subs	r2, r0, r3
 80053b4:	d0cc      	beq.n	8005350 <_malloc_r+0x20>
 80053b6:	1a1b      	subs	r3, r3, r0
 80053b8:	50a3      	str	r3, [r4, r2]
 80053ba:	e7c9      	b.n	8005350 <_malloc_r+0x20>
 80053bc:	4622      	mov	r2, r4
 80053be:	6864      	ldr	r4, [r4, #4]
 80053c0:	e7cc      	b.n	800535c <_malloc_r+0x2c>
 80053c2:	1cc4      	adds	r4, r0, #3
 80053c4:	f024 0403 	bic.w	r4, r4, #3
 80053c8:	42a0      	cmp	r0, r4
 80053ca:	d0e3      	beq.n	8005394 <_malloc_r+0x64>
 80053cc:	1a21      	subs	r1, r4, r0
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 faf6 	bl	80059c0 <_sbrk_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1dd      	bne.n	8005394 <_malloc_r+0x64>
 80053d8:	e7cf      	b.n	800537a <_malloc_r+0x4a>
 80053da:	bf00      	nop
 80053dc:	20000090 	.word	0x20000090
 80053e0:	20000094 	.word	0x20000094

080053e4 <__sfputc_r>:
 80053e4:	6893      	ldr	r3, [r2, #8]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	b410      	push	{r4}
 80053ec:	6093      	str	r3, [r2, #8]
 80053ee:	da08      	bge.n	8005402 <__sfputc_r+0x1e>
 80053f0:	6994      	ldr	r4, [r2, #24]
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	db01      	blt.n	80053fa <__sfputc_r+0x16>
 80053f6:	290a      	cmp	r1, #10
 80053f8:	d103      	bne.n	8005402 <__sfputc_r+0x1e>
 80053fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053fe:	f7ff bc69 	b.w	8004cd4 <__swbuf_r>
 8005402:	6813      	ldr	r3, [r2, #0]
 8005404:	1c58      	adds	r0, r3, #1
 8005406:	6010      	str	r0, [r2, #0]
 8005408:	7019      	strb	r1, [r3, #0]
 800540a:	4608      	mov	r0, r1
 800540c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005410:	4770      	bx	lr

08005412 <__sfputs_r>:
 8005412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005414:	4606      	mov	r6, r0
 8005416:	460f      	mov	r7, r1
 8005418:	4614      	mov	r4, r2
 800541a:	18d5      	adds	r5, r2, r3
 800541c:	42ac      	cmp	r4, r5
 800541e:	d101      	bne.n	8005424 <__sfputs_r+0x12>
 8005420:	2000      	movs	r0, #0
 8005422:	e007      	b.n	8005434 <__sfputs_r+0x22>
 8005424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005428:	463a      	mov	r2, r7
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff ffda 	bl	80053e4 <__sfputc_r>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d1f3      	bne.n	800541c <__sfputs_r+0xa>
 8005434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005438 <_vfiprintf_r>:
 8005438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543c:	460d      	mov	r5, r1
 800543e:	b09d      	sub	sp, #116	; 0x74
 8005440:	4614      	mov	r4, r2
 8005442:	4698      	mov	r8, r3
 8005444:	4606      	mov	r6, r0
 8005446:	b118      	cbz	r0, 8005450 <_vfiprintf_r+0x18>
 8005448:	6983      	ldr	r3, [r0, #24]
 800544a:	b90b      	cbnz	r3, 8005450 <_vfiprintf_r+0x18>
 800544c:	f7ff fe1c 	bl	8005088 <__sinit>
 8005450:	4b89      	ldr	r3, [pc, #548]	; (8005678 <_vfiprintf_r+0x240>)
 8005452:	429d      	cmp	r5, r3
 8005454:	d11b      	bne.n	800548e <_vfiprintf_r+0x56>
 8005456:	6875      	ldr	r5, [r6, #4]
 8005458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800545a:	07d9      	lsls	r1, r3, #31
 800545c:	d405      	bmi.n	800546a <_vfiprintf_r+0x32>
 800545e:	89ab      	ldrh	r3, [r5, #12]
 8005460:	059a      	lsls	r2, r3, #22
 8005462:	d402      	bmi.n	800546a <_vfiprintf_r+0x32>
 8005464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005466:	f7ff fead 	bl	80051c4 <__retarget_lock_acquire_recursive>
 800546a:	89ab      	ldrh	r3, [r5, #12]
 800546c:	071b      	lsls	r3, r3, #28
 800546e:	d501      	bpl.n	8005474 <_vfiprintf_r+0x3c>
 8005470:	692b      	ldr	r3, [r5, #16]
 8005472:	b9eb      	cbnz	r3, 80054b0 <_vfiprintf_r+0x78>
 8005474:	4629      	mov	r1, r5
 8005476:	4630      	mov	r0, r6
 8005478:	f7ff fc7e 	bl	8004d78 <__swsetup_r>
 800547c:	b1c0      	cbz	r0, 80054b0 <_vfiprintf_r+0x78>
 800547e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005480:	07dc      	lsls	r4, r3, #31
 8005482:	d50e      	bpl.n	80054a2 <_vfiprintf_r+0x6a>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	b01d      	add	sp, #116	; 0x74
 800548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548e:	4b7b      	ldr	r3, [pc, #492]	; (800567c <_vfiprintf_r+0x244>)
 8005490:	429d      	cmp	r5, r3
 8005492:	d101      	bne.n	8005498 <_vfiprintf_r+0x60>
 8005494:	68b5      	ldr	r5, [r6, #8]
 8005496:	e7df      	b.n	8005458 <_vfiprintf_r+0x20>
 8005498:	4b79      	ldr	r3, [pc, #484]	; (8005680 <_vfiprintf_r+0x248>)
 800549a:	429d      	cmp	r5, r3
 800549c:	bf08      	it	eq
 800549e:	68f5      	ldreq	r5, [r6, #12]
 80054a0:	e7da      	b.n	8005458 <_vfiprintf_r+0x20>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	0598      	lsls	r0, r3, #22
 80054a6:	d4ed      	bmi.n	8005484 <_vfiprintf_r+0x4c>
 80054a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054aa:	f7ff fe8c 	bl	80051c6 <__retarget_lock_release_recursive>
 80054ae:	e7e9      	b.n	8005484 <_vfiprintf_r+0x4c>
 80054b0:	2300      	movs	r3, #0
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
 80054b4:	2320      	movs	r3, #32
 80054b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80054be:	2330      	movs	r3, #48	; 0x30
 80054c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005684 <_vfiprintf_r+0x24c>
 80054c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054c8:	f04f 0901 	mov.w	r9, #1
 80054cc:	4623      	mov	r3, r4
 80054ce:	469a      	mov	sl, r3
 80054d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d4:	b10a      	cbz	r2, 80054da <_vfiprintf_r+0xa2>
 80054d6:	2a25      	cmp	r2, #37	; 0x25
 80054d8:	d1f9      	bne.n	80054ce <_vfiprintf_r+0x96>
 80054da:	ebba 0b04 	subs.w	fp, sl, r4
 80054de:	d00b      	beq.n	80054f8 <_vfiprintf_r+0xc0>
 80054e0:	465b      	mov	r3, fp
 80054e2:	4622      	mov	r2, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ff93 	bl	8005412 <__sfputs_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	f000 80aa 	beq.w	8005646 <_vfiprintf_r+0x20e>
 80054f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f4:	445a      	add	r2, fp
 80054f6:	9209      	str	r2, [sp, #36]	; 0x24
 80054f8:	f89a 3000 	ldrb.w	r3, [sl]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80a2 	beq.w	8005646 <_vfiprintf_r+0x20e>
 8005502:	2300      	movs	r3, #0
 8005504:	f04f 32ff 	mov.w	r2, #4294967295
 8005508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800550c:	f10a 0a01 	add.w	sl, sl, #1
 8005510:	9304      	str	r3, [sp, #16]
 8005512:	9307      	str	r3, [sp, #28]
 8005514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005518:	931a      	str	r3, [sp, #104]	; 0x68
 800551a:	4654      	mov	r4, sl
 800551c:	2205      	movs	r2, #5
 800551e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005522:	4858      	ldr	r0, [pc, #352]	; (8005684 <_vfiprintf_r+0x24c>)
 8005524:	f7fa fe74 	bl	8000210 <memchr>
 8005528:	9a04      	ldr	r2, [sp, #16]
 800552a:	b9d8      	cbnz	r0, 8005564 <_vfiprintf_r+0x12c>
 800552c:	06d1      	lsls	r1, r2, #27
 800552e:	bf44      	itt	mi
 8005530:	2320      	movmi	r3, #32
 8005532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005536:	0713      	lsls	r3, r2, #28
 8005538:	bf44      	itt	mi
 800553a:	232b      	movmi	r3, #43	; 0x2b
 800553c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005540:	f89a 3000 	ldrb.w	r3, [sl]
 8005544:	2b2a      	cmp	r3, #42	; 0x2a
 8005546:	d015      	beq.n	8005574 <_vfiprintf_r+0x13c>
 8005548:	9a07      	ldr	r2, [sp, #28]
 800554a:	4654      	mov	r4, sl
 800554c:	2000      	movs	r0, #0
 800554e:	f04f 0c0a 	mov.w	ip, #10
 8005552:	4621      	mov	r1, r4
 8005554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005558:	3b30      	subs	r3, #48	; 0x30
 800555a:	2b09      	cmp	r3, #9
 800555c:	d94e      	bls.n	80055fc <_vfiprintf_r+0x1c4>
 800555e:	b1b0      	cbz	r0, 800558e <_vfiprintf_r+0x156>
 8005560:	9207      	str	r2, [sp, #28]
 8005562:	e014      	b.n	800558e <_vfiprintf_r+0x156>
 8005564:	eba0 0308 	sub.w	r3, r0, r8
 8005568:	fa09 f303 	lsl.w	r3, r9, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	46a2      	mov	sl, r4
 8005572:	e7d2      	b.n	800551a <_vfiprintf_r+0xe2>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	1d19      	adds	r1, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	9103      	str	r1, [sp, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	bfbb      	ittet	lt
 8005580:	425b      	neglt	r3, r3
 8005582:	f042 0202 	orrlt.w	r2, r2, #2
 8005586:	9307      	strge	r3, [sp, #28]
 8005588:	9307      	strlt	r3, [sp, #28]
 800558a:	bfb8      	it	lt
 800558c:	9204      	strlt	r2, [sp, #16]
 800558e:	7823      	ldrb	r3, [r4, #0]
 8005590:	2b2e      	cmp	r3, #46	; 0x2e
 8005592:	d10c      	bne.n	80055ae <_vfiprintf_r+0x176>
 8005594:	7863      	ldrb	r3, [r4, #1]
 8005596:	2b2a      	cmp	r3, #42	; 0x2a
 8005598:	d135      	bne.n	8005606 <_vfiprintf_r+0x1ce>
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	9203      	str	r2, [sp, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfb8      	it	lt
 80055a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80055aa:	3402      	adds	r4, #2
 80055ac:	9305      	str	r3, [sp, #20]
 80055ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005694 <_vfiprintf_r+0x25c>
 80055b2:	7821      	ldrb	r1, [r4, #0]
 80055b4:	2203      	movs	r2, #3
 80055b6:	4650      	mov	r0, sl
 80055b8:	f7fa fe2a 	bl	8000210 <memchr>
 80055bc:	b140      	cbz	r0, 80055d0 <_vfiprintf_r+0x198>
 80055be:	2340      	movs	r3, #64	; 0x40
 80055c0:	eba0 000a 	sub.w	r0, r0, sl
 80055c4:	fa03 f000 	lsl.w	r0, r3, r0
 80055c8:	9b04      	ldr	r3, [sp, #16]
 80055ca:	4303      	orrs	r3, r0
 80055cc:	3401      	adds	r4, #1
 80055ce:	9304      	str	r3, [sp, #16]
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	482c      	ldr	r0, [pc, #176]	; (8005688 <_vfiprintf_r+0x250>)
 80055d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055da:	2206      	movs	r2, #6
 80055dc:	f7fa fe18 	bl	8000210 <memchr>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d03f      	beq.n	8005664 <_vfiprintf_r+0x22c>
 80055e4:	4b29      	ldr	r3, [pc, #164]	; (800568c <_vfiprintf_r+0x254>)
 80055e6:	bb1b      	cbnz	r3, 8005630 <_vfiprintf_r+0x1f8>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	3307      	adds	r3, #7
 80055ec:	f023 0307 	bic.w	r3, r3, #7
 80055f0:	3308      	adds	r3, #8
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f6:	443b      	add	r3, r7
 80055f8:	9309      	str	r3, [sp, #36]	; 0x24
 80055fa:	e767      	b.n	80054cc <_vfiprintf_r+0x94>
 80055fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005600:	460c      	mov	r4, r1
 8005602:	2001      	movs	r0, #1
 8005604:	e7a5      	b.n	8005552 <_vfiprintf_r+0x11a>
 8005606:	2300      	movs	r3, #0
 8005608:	3401      	adds	r4, #1
 800560a:	9305      	str	r3, [sp, #20]
 800560c:	4619      	mov	r1, r3
 800560e:	f04f 0c0a 	mov.w	ip, #10
 8005612:	4620      	mov	r0, r4
 8005614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005618:	3a30      	subs	r2, #48	; 0x30
 800561a:	2a09      	cmp	r2, #9
 800561c:	d903      	bls.n	8005626 <_vfiprintf_r+0x1ee>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0c5      	beq.n	80055ae <_vfiprintf_r+0x176>
 8005622:	9105      	str	r1, [sp, #20]
 8005624:	e7c3      	b.n	80055ae <_vfiprintf_r+0x176>
 8005626:	fb0c 2101 	mla	r1, ip, r1, r2
 800562a:	4604      	mov	r4, r0
 800562c:	2301      	movs	r3, #1
 800562e:	e7f0      	b.n	8005612 <_vfiprintf_r+0x1da>
 8005630:	ab03      	add	r3, sp, #12
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	462a      	mov	r2, r5
 8005636:	4b16      	ldr	r3, [pc, #88]	; (8005690 <_vfiprintf_r+0x258>)
 8005638:	a904      	add	r1, sp, #16
 800563a:	4630      	mov	r0, r6
 800563c:	f3af 8000 	nop.w
 8005640:	4607      	mov	r7, r0
 8005642:	1c78      	adds	r0, r7, #1
 8005644:	d1d6      	bne.n	80055f4 <_vfiprintf_r+0x1bc>
 8005646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005648:	07d9      	lsls	r1, r3, #31
 800564a:	d405      	bmi.n	8005658 <_vfiprintf_r+0x220>
 800564c:	89ab      	ldrh	r3, [r5, #12]
 800564e:	059a      	lsls	r2, r3, #22
 8005650:	d402      	bmi.n	8005658 <_vfiprintf_r+0x220>
 8005652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005654:	f7ff fdb7 	bl	80051c6 <__retarget_lock_release_recursive>
 8005658:	89ab      	ldrh	r3, [r5, #12]
 800565a:	065b      	lsls	r3, r3, #25
 800565c:	f53f af12 	bmi.w	8005484 <_vfiprintf_r+0x4c>
 8005660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005662:	e711      	b.n	8005488 <_vfiprintf_r+0x50>
 8005664:	ab03      	add	r3, sp, #12
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	462a      	mov	r2, r5
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <_vfiprintf_r+0x258>)
 800566c:	a904      	add	r1, sp, #16
 800566e:	4630      	mov	r0, r6
 8005670:	f000 f880 	bl	8005774 <_printf_i>
 8005674:	e7e4      	b.n	8005640 <_vfiprintf_r+0x208>
 8005676:	bf00      	nop
 8005678:	08005c54 	.word	0x08005c54
 800567c:	08005c74 	.word	0x08005c74
 8005680:	08005c34 	.word	0x08005c34
 8005684:	08005c94 	.word	0x08005c94
 8005688:	08005c9e 	.word	0x08005c9e
 800568c:	00000000 	.word	0x00000000
 8005690:	08005413 	.word	0x08005413
 8005694:	08005c9a 	.word	0x08005c9a

08005698 <_printf_common>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	4616      	mov	r6, r2
 800569e:	4699      	mov	r9, r3
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfb8      	it	lt
 80056ac:	4613      	movlt	r3, r2
 80056ae:	6033      	str	r3, [r6, #0]
 80056b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b4:	4607      	mov	r7, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	b10a      	cbz	r2, 80056be <_printf_common+0x26>
 80056ba:	3301      	adds	r3, #1
 80056bc:	6033      	str	r3, [r6, #0]
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	0699      	lsls	r1, r3, #26
 80056c2:	bf42      	ittt	mi
 80056c4:	6833      	ldrmi	r3, [r6, #0]
 80056c6:	3302      	addmi	r3, #2
 80056c8:	6033      	strmi	r3, [r6, #0]
 80056ca:	6825      	ldr	r5, [r4, #0]
 80056cc:	f015 0506 	ands.w	r5, r5, #6
 80056d0:	d106      	bne.n	80056e0 <_printf_common+0x48>
 80056d2:	f104 0a19 	add.w	sl, r4, #25
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	6832      	ldr	r2, [r6, #0]
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	42ab      	cmp	r3, r5
 80056de:	dc26      	bgt.n	800572e <_printf_common+0x96>
 80056e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e4:	1e13      	subs	r3, r2, #0
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	bf18      	it	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	0692      	lsls	r2, r2, #26
 80056ee:	d42b      	bmi.n	8005748 <_printf_common+0xb0>
 80056f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f4:	4649      	mov	r1, r9
 80056f6:	4638      	mov	r0, r7
 80056f8:	47c0      	blx	r8
 80056fa:	3001      	adds	r0, #1
 80056fc:	d01e      	beq.n	800573c <_printf_common+0xa4>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	68e5      	ldr	r5, [r4, #12]
 8005702:	6832      	ldr	r2, [r6, #0]
 8005704:	f003 0306 	and.w	r3, r3, #6
 8005708:	2b04      	cmp	r3, #4
 800570a:	bf08      	it	eq
 800570c:	1aad      	subeq	r5, r5, r2
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	6922      	ldr	r2, [r4, #16]
 8005712:	bf0c      	ite	eq
 8005714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005718:	2500      	movne	r5, #0
 800571a:	4293      	cmp	r3, r2
 800571c:	bfc4      	itt	gt
 800571e:	1a9b      	subgt	r3, r3, r2
 8005720:	18ed      	addgt	r5, r5, r3
 8005722:	2600      	movs	r6, #0
 8005724:	341a      	adds	r4, #26
 8005726:	42b5      	cmp	r5, r6
 8005728:	d11a      	bne.n	8005760 <_printf_common+0xc8>
 800572a:	2000      	movs	r0, #0
 800572c:	e008      	b.n	8005740 <_printf_common+0xa8>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4649      	mov	r1, r9
 8005734:	4638      	mov	r0, r7
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d103      	bne.n	8005744 <_printf_common+0xac>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	3501      	adds	r5, #1
 8005746:	e7c6      	b.n	80056d6 <_printf_common+0x3e>
 8005748:	18e1      	adds	r1, r4, r3
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	2030      	movs	r0, #48	; 0x30
 800574e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005752:	4422      	add	r2, r4
 8005754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575c:	3302      	adds	r3, #2
 800575e:	e7c7      	b.n	80056f0 <_printf_common+0x58>
 8005760:	2301      	movs	r3, #1
 8005762:	4622      	mov	r2, r4
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d0e6      	beq.n	800573c <_printf_common+0xa4>
 800576e:	3601      	adds	r6, #1
 8005770:	e7d9      	b.n	8005726 <_printf_common+0x8e>
	...

08005774 <_printf_i>:
 8005774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	460c      	mov	r4, r1
 800577a:	4691      	mov	r9, r2
 800577c:	7e27      	ldrb	r7, [r4, #24]
 800577e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005780:	2f78      	cmp	r7, #120	; 0x78
 8005782:	4680      	mov	r8, r0
 8005784:	469a      	mov	sl, r3
 8005786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578a:	d807      	bhi.n	800579c <_printf_i+0x28>
 800578c:	2f62      	cmp	r7, #98	; 0x62
 800578e:	d80a      	bhi.n	80057a6 <_printf_i+0x32>
 8005790:	2f00      	cmp	r7, #0
 8005792:	f000 80d8 	beq.w	8005946 <_printf_i+0x1d2>
 8005796:	2f58      	cmp	r7, #88	; 0x58
 8005798:	f000 80a3 	beq.w	80058e2 <_printf_i+0x16e>
 800579c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a4:	e03a      	b.n	800581c <_printf_i+0xa8>
 80057a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057aa:	2b15      	cmp	r3, #21
 80057ac:	d8f6      	bhi.n	800579c <_printf_i+0x28>
 80057ae:	a001      	add	r0, pc, #4	; (adr r0, 80057b4 <_printf_i+0x40>)
 80057b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	08005821 	.word	0x08005821
 80057bc:	0800579d 	.word	0x0800579d
 80057c0:	0800579d 	.word	0x0800579d
 80057c4:	0800579d 	.word	0x0800579d
 80057c8:	0800579d 	.word	0x0800579d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800579d 	.word	0x0800579d
 80057d4:	0800579d 	.word	0x0800579d
 80057d8:	0800579d 	.word	0x0800579d
 80057dc:	0800579d 	.word	0x0800579d
 80057e0:	0800592d 	.word	0x0800592d
 80057e4:	08005851 	.word	0x08005851
 80057e8:	0800590f 	.word	0x0800590f
 80057ec:	0800579d 	.word	0x0800579d
 80057f0:	0800579d 	.word	0x0800579d
 80057f4:	0800594f 	.word	0x0800594f
 80057f8:	0800579d 	.word	0x0800579d
 80057fc:	08005851 	.word	0x08005851
 8005800:	0800579d 	.word	0x0800579d
 8005804:	0800579d 	.word	0x0800579d
 8005808:	08005917 	.word	0x08005917
 800580c:	680b      	ldr	r3, [r1, #0]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	600a      	str	r2, [r1, #0]
 8005814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581c:	2301      	movs	r3, #1
 800581e:	e0a3      	b.n	8005968 <_printf_i+0x1f4>
 8005820:	6825      	ldr	r5, [r4, #0]
 8005822:	6808      	ldr	r0, [r1, #0]
 8005824:	062e      	lsls	r6, r5, #24
 8005826:	f100 0304 	add.w	r3, r0, #4
 800582a:	d50a      	bpl.n	8005842 <_printf_i+0xce>
 800582c:	6805      	ldr	r5, [r0, #0]
 800582e:	600b      	str	r3, [r1, #0]
 8005830:	2d00      	cmp	r5, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xc8>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	426d      	negs	r5, r5
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	485e      	ldr	r0, [pc, #376]	; (80059b8 <_printf_i+0x244>)
 800583e:	230a      	movs	r3, #10
 8005840:	e019      	b.n	8005876 <_printf_i+0x102>
 8005842:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005846:	6805      	ldr	r5, [r0, #0]
 8005848:	600b      	str	r3, [r1, #0]
 800584a:	bf18      	it	ne
 800584c:	b22d      	sxthne	r5, r5
 800584e:	e7ef      	b.n	8005830 <_printf_i+0xbc>
 8005850:	680b      	ldr	r3, [r1, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	1d18      	adds	r0, r3, #4
 8005856:	6008      	str	r0, [r1, #0]
 8005858:	0628      	lsls	r0, r5, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xec>
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0xf2>
 8005860:	0669      	lsls	r1, r5, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xe8>
 8005864:	881d      	ldrh	r5, [r3, #0]
 8005866:	4854      	ldr	r0, [pc, #336]	; (80059b8 <_printf_i+0x244>)
 8005868:	2f6f      	cmp	r7, #111	; 0x6f
 800586a:	bf0c      	ite	eq
 800586c:	2308      	moveq	r3, #8
 800586e:	230a      	movne	r3, #10
 8005870:	2100      	movs	r1, #0
 8005872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005876:	6866      	ldr	r6, [r4, #4]
 8005878:	60a6      	str	r6, [r4, #8]
 800587a:	2e00      	cmp	r6, #0
 800587c:	bfa2      	ittt	ge
 800587e:	6821      	ldrge	r1, [r4, #0]
 8005880:	f021 0104 	bicge.w	r1, r1, #4
 8005884:	6021      	strge	r1, [r4, #0]
 8005886:	b90d      	cbnz	r5, 800588c <_printf_i+0x118>
 8005888:	2e00      	cmp	r6, #0
 800588a:	d04d      	beq.n	8005928 <_printf_i+0x1b4>
 800588c:	4616      	mov	r6, r2
 800588e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005892:	fb03 5711 	mls	r7, r3, r1, r5
 8005896:	5dc7      	ldrb	r7, [r0, r7]
 8005898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800589c:	462f      	mov	r7, r5
 800589e:	42bb      	cmp	r3, r7
 80058a0:	460d      	mov	r5, r1
 80058a2:	d9f4      	bls.n	800588e <_printf_i+0x11a>
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d10b      	bne.n	80058c0 <_printf_i+0x14c>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07df      	lsls	r7, r3, #31
 80058ac:	d508      	bpl.n	80058c0 <_printf_i+0x14c>
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	6861      	ldr	r1, [r4, #4]
 80058b2:	4299      	cmp	r1, r3
 80058b4:	bfde      	ittt	le
 80058b6:	2330      	movle	r3, #48	; 0x30
 80058b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058c0:	1b92      	subs	r2, r2, r6
 80058c2:	6122      	str	r2, [r4, #16]
 80058c4:	f8cd a000 	str.w	sl, [sp]
 80058c8:	464b      	mov	r3, r9
 80058ca:	aa03      	add	r2, sp, #12
 80058cc:	4621      	mov	r1, r4
 80058ce:	4640      	mov	r0, r8
 80058d0:	f7ff fee2 	bl	8005698 <_printf_common>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d14c      	bne.n	8005972 <_printf_i+0x1fe>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	b004      	add	sp, #16
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	4835      	ldr	r0, [pc, #212]	; (80059b8 <_printf_i+0x244>)
 80058e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	680e      	ldr	r6, [r1, #0]
 80058ec:	061f      	lsls	r7, r3, #24
 80058ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80058f2:	600e      	str	r6, [r1, #0]
 80058f4:	d514      	bpl.n	8005920 <_printf_i+0x1ac>
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	bf44      	itt	mi
 80058fa:	f043 0320 	orrmi.w	r3, r3, #32
 80058fe:	6023      	strmi	r3, [r4, #0]
 8005900:	b91d      	cbnz	r5, 800590a <_printf_i+0x196>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f023 0320 	bic.w	r3, r3, #32
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	2310      	movs	r3, #16
 800590c:	e7b0      	b.n	8005870 <_printf_i+0xfc>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f043 0320 	orr.w	r3, r3, #32
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	2378      	movs	r3, #120	; 0x78
 8005918:	4828      	ldr	r0, [pc, #160]	; (80059bc <_printf_i+0x248>)
 800591a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800591e:	e7e3      	b.n	80058e8 <_printf_i+0x174>
 8005920:	065e      	lsls	r6, r3, #25
 8005922:	bf48      	it	mi
 8005924:	b2ad      	uxthmi	r5, r5
 8005926:	e7e6      	b.n	80058f6 <_printf_i+0x182>
 8005928:	4616      	mov	r6, r2
 800592a:	e7bb      	b.n	80058a4 <_printf_i+0x130>
 800592c:	680b      	ldr	r3, [r1, #0]
 800592e:	6826      	ldr	r6, [r4, #0]
 8005930:	6960      	ldr	r0, [r4, #20]
 8005932:	1d1d      	adds	r5, r3, #4
 8005934:	600d      	str	r5, [r1, #0]
 8005936:	0635      	lsls	r5, r6, #24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	d501      	bpl.n	8005940 <_printf_i+0x1cc>
 800593c:	6018      	str	r0, [r3, #0]
 800593e:	e002      	b.n	8005946 <_printf_i+0x1d2>
 8005940:	0671      	lsls	r1, r6, #25
 8005942:	d5fb      	bpl.n	800593c <_printf_i+0x1c8>
 8005944:	8018      	strh	r0, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	4616      	mov	r6, r2
 800594c:	e7ba      	b.n	80058c4 <_printf_i+0x150>
 800594e:	680b      	ldr	r3, [r1, #0]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	600a      	str	r2, [r1, #0]
 8005954:	681e      	ldr	r6, [r3, #0]
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	2100      	movs	r1, #0
 800595a:	4630      	mov	r0, r6
 800595c:	f7fa fc58 	bl	8000210 <memchr>
 8005960:	b108      	cbz	r0, 8005966 <_printf_i+0x1f2>
 8005962:	1b80      	subs	r0, r0, r6
 8005964:	6060      	str	r0, [r4, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	2300      	movs	r3, #0
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	e7a8      	b.n	80058c4 <_printf_i+0x150>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	4632      	mov	r2, r6
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	47d0      	blx	sl
 800597c:	3001      	adds	r0, #1
 800597e:	d0ab      	beq.n	80058d8 <_printf_i+0x164>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	079b      	lsls	r3, r3, #30
 8005984:	d413      	bmi.n	80059ae <_printf_i+0x23a>
 8005986:	68e0      	ldr	r0, [r4, #12]
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	4298      	cmp	r0, r3
 800598c:	bfb8      	it	lt
 800598e:	4618      	movlt	r0, r3
 8005990:	e7a4      	b.n	80058dc <_printf_i+0x168>
 8005992:	2301      	movs	r3, #1
 8005994:	4632      	mov	r2, r6
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d09b      	beq.n	80058d8 <_printf_i+0x164>
 80059a0:	3501      	adds	r5, #1
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	9903      	ldr	r1, [sp, #12]
 80059a6:	1a5b      	subs	r3, r3, r1
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dcf2      	bgt.n	8005992 <_printf_i+0x21e>
 80059ac:	e7eb      	b.n	8005986 <_printf_i+0x212>
 80059ae:	2500      	movs	r5, #0
 80059b0:	f104 0619 	add.w	r6, r4, #25
 80059b4:	e7f5      	b.n	80059a2 <_printf_i+0x22e>
 80059b6:	bf00      	nop
 80059b8:	08005ca5 	.word	0x08005ca5
 80059bc:	08005cb6 	.word	0x08005cb6

080059c0 <_sbrk_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_sbrk_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fb fe8a 	bl	80016e4 <_sbrk>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_sbrk_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_sbrk_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	200002fc 	.word	0x200002fc

080059e0 <__sread>:
 80059e0:	b510      	push	{r4, lr}
 80059e2:	460c      	mov	r4, r1
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	f000 f8a0 	bl	8005b2c <_read_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	bfab      	itete	ge
 80059f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059f2:	89a3      	ldrhlt	r3, [r4, #12]
 80059f4:	181b      	addge	r3, r3, r0
 80059f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059fa:	bfac      	ite	ge
 80059fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80059fe:	81a3      	strhlt	r3, [r4, #12]
 8005a00:	bd10      	pop	{r4, pc}

08005a02 <__swrite>:
 8005a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	461f      	mov	r7, r3
 8005a08:	898b      	ldrh	r3, [r1, #12]
 8005a0a:	05db      	lsls	r3, r3, #23
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	4616      	mov	r6, r2
 8005a12:	d505      	bpl.n	8005a20 <__swrite+0x1e>
 8005a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a18:	2302      	movs	r3, #2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f000 f868 	bl	8005af0 <_lseek_r>
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	4632      	mov	r2, r6
 8005a2e:	463b      	mov	r3, r7
 8005a30:	4628      	mov	r0, r5
 8005a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a36:	f000 b817 	b.w	8005a68 <_write_r>

08005a3a <__sseek>:
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a42:	f000 f855 	bl	8005af0 <_lseek_r>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	bf15      	itete	ne
 8005a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a56:	81a3      	strheq	r3, [r4, #12]
 8005a58:	bf18      	it	ne
 8005a5a:	81a3      	strhne	r3, [r4, #12]
 8005a5c:	bd10      	pop	{r4, pc}

08005a5e <__sclose>:
 8005a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a62:	f000 b813 	b.w	8005a8c <_close_r>
	...

08005a68 <_write_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d07      	ldr	r5, [pc, #28]	; (8005a88 <_write_r+0x20>)
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	4608      	mov	r0, r1
 8005a70:	4611      	mov	r1, r2
 8005a72:	2200      	movs	r2, #0
 8005a74:	602a      	str	r2, [r5, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f7fb fde3 	bl	8001642 <_write>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_write_r+0x1e>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_write_r+0x1e>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	200002fc 	.word	0x200002fc

08005a8c <_close_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d06      	ldr	r5, [pc, #24]	; (8005aa8 <_close_r+0x1c>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	f7fb fdef 	bl	800167a <_close>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_close_r+0x1a>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_close_r+0x1a>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	200002fc 	.word	0x200002fc

08005aac <_fstat_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	; (8005acc <_fstat_r+0x20>)
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f7fb fdea 	bl	8001692 <_fstat>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d102      	bne.n	8005ac8 <_fstat_r+0x1c>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	b103      	cbz	r3, 8005ac8 <_fstat_r+0x1c>
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	bf00      	nop
 8005acc:	200002fc 	.word	0x200002fc

08005ad0 <_isatty_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d06      	ldr	r5, [pc, #24]	; (8005aec <_isatty_r+0x1c>)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fb fde9 	bl	80016b2 <_isatty>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_isatty_r+0x1a>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_isatty_r+0x1a>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	200002fc 	.word	0x200002fc

08005af0 <_lseek_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d07      	ldr	r5, [pc, #28]	; (8005b10 <_lseek_r+0x20>)
 8005af4:	4604      	mov	r4, r0
 8005af6:	4608      	mov	r0, r1
 8005af8:	4611      	mov	r1, r2
 8005afa:	2200      	movs	r2, #0
 8005afc:	602a      	str	r2, [r5, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f7fb fde2 	bl	80016c8 <_lseek>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d102      	bne.n	8005b0e <_lseek_r+0x1e>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	b103      	cbz	r3, 8005b0e <_lseek_r+0x1e>
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	bd38      	pop	{r3, r4, r5, pc}
 8005b10:	200002fc 	.word	0x200002fc

08005b14 <__malloc_lock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__malloc_lock+0x8>)
 8005b16:	f7ff bb55 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	200002f4 	.word	0x200002f4

08005b20 <__malloc_unlock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__malloc_unlock+0x8>)
 8005b22:	f7ff bb50 	b.w	80051c6 <__retarget_lock_release_recursive>
 8005b26:	bf00      	nop
 8005b28:	200002f4 	.word	0x200002f4

08005b2c <_read_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_read_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb fd64 	bl	8001608 <_read>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_read_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_read_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200002fc 	.word	0x200002fc

08005b50 <fmaxf>:
 8005b50:	b508      	push	{r3, lr}
 8005b52:	ed2d 8b02 	vpush	{d8}
 8005b56:	eeb0 8a40 	vmov.f32	s16, s0
 8005b5a:	eef0 8a60 	vmov.f32	s17, s1
 8005b5e:	f000 f82d 	bl	8005bbc <__fpclassifyf>
 8005b62:	b148      	cbz	r0, 8005b78 <fmaxf+0x28>
 8005b64:	eeb0 0a68 	vmov.f32	s0, s17
 8005b68:	f000 f828 	bl	8005bbc <__fpclassifyf>
 8005b6c:	b130      	cbz	r0, 8005b7c <fmaxf+0x2c>
 8005b6e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	dc01      	bgt.n	8005b7c <fmaxf+0x2c>
 8005b78:	eeb0 8a68 	vmov.f32	s16, s17
 8005b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b80:	ecbd 8b02 	vpop	{d8}
 8005b84:	bd08      	pop	{r3, pc}

08005b86 <fminf>:
 8005b86:	b508      	push	{r3, lr}
 8005b88:	ed2d 8b02 	vpush	{d8}
 8005b8c:	eeb0 8a40 	vmov.f32	s16, s0
 8005b90:	eef0 8a60 	vmov.f32	s17, s1
 8005b94:	f000 f812 	bl	8005bbc <__fpclassifyf>
 8005b98:	b148      	cbz	r0, 8005bae <fminf+0x28>
 8005b9a:	eeb0 0a68 	vmov.f32	s0, s17
 8005b9e:	f000 f80d 	bl	8005bbc <__fpclassifyf>
 8005ba2:	b130      	cbz	r0, 8005bb2 <fminf+0x2c>
 8005ba4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	d401      	bmi.n	8005bb2 <fminf+0x2c>
 8005bae:	eeb0 8a68 	vmov.f32	s16, s17
 8005bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8005bb6:	ecbd 8b02 	vpop	{d8}
 8005bba:	bd08      	pop	{r3, pc}

08005bbc <__fpclassifyf>:
 8005bbc:	ee10 3a10 	vmov	r3, s0
 8005bc0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8005bc4:	d00d      	beq.n	8005be2 <__fpclassifyf+0x26>
 8005bc6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8005bca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005bce:	d30a      	bcc.n	8005be6 <__fpclassifyf+0x2a>
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <__fpclassifyf+0x34>)
 8005bd2:	1e42      	subs	r2, r0, #1
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d908      	bls.n	8005bea <__fpclassifyf+0x2e>
 8005bd8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8005bdc:	4258      	negs	r0, r3
 8005bde:	4158      	adcs	r0, r3
 8005be0:	4770      	bx	lr
 8005be2:	2002      	movs	r0, #2
 8005be4:	4770      	bx	lr
 8005be6:	2004      	movs	r0, #4
 8005be8:	4770      	bx	lr
 8005bea:	2003      	movs	r0, #3
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	007ffffe 	.word	0x007ffffe

08005bf4 <_init>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr

08005c00 <_fini>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr
